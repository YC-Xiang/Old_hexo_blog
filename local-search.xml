<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>ICS2022 PA2</title>
    <link href="/2023/01/31/ICS2022-PA2/"/>
    <url>/2023/01/31/ICS2022-PA2/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ICS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Shell scripts</title>
    <link href="/2023/01/30/shell-scrpts/"/>
    <url>/2023/01/30/shell-scrpts/</url>
    
    <content type="html"><![CDATA[<p><code>foo=bar</code> 变量定义<code>=</code>左右不能加空格。</p><p>用<code>&#39;</code>分隔的字符串是字面值字符串，不会替换变量值，而用<code>&quot;</code>分隔的字符串会。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">foo=bar<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$foo</span>&quot;</span><br><span class="hljs-comment"># prints bar</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;$foo&#x27;</span><br><span class="hljs-comment"># prints $foo</span><br></code></pre></td></tr></table></figure><p><code>$0</code>- Name of the script<br><code>$1</code>- to $9 - Arguments to the script. $1 is the first argument and so on.<br><code>$@</code>- All the arguments<br><code>$#</code>- Number of arguments<br><code>$?</code>- Return code of the previous command<br><code>$$</code>- Process identification number (PID) for the current script<br><code>!!</code>- Entire last command, including arguments. A common pattern is to execute a command only for it to fail due to missing permissions; you can quickly re-execute the command with sudo by doing <code>sudo !!</code><br><code>$_</code>- Last argument from the last command. If you are in an interactive shell, you can also quickly get this value by typing Esc followed by <code>.</code> or <code>Alt+.</code></p><p>The <code>true</code> program will always have a 0 return code and the <code>false</code> command will always have a 1 return code.</p><p><code>Command1 &amp;&amp; Command2</code> 如果Command1命令运行成功，则继续运行Command2命令。<br><code>Command1 || Command2</code> 如果Command1命令运行失败，则继续运行Command2命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-literal">false</span> || <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Oops, fail&quot;</span><br><span class="hljs-comment"># Oops, fail</span><br><br><span class="hljs-literal">true</span> || <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Will not be printed&quot;</span><br><span class="hljs-comment">#</span><br><br><span class="hljs-literal">true</span> &amp;&amp; <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Things went well&quot;</span><br><span class="hljs-comment"># Things went well</span><br><br><span class="hljs-literal">false</span> &amp;&amp; <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Will not be printed&quot;</span><br><span class="hljs-comment">#</span><br><br><span class="hljs-literal">true</span> ; <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;This will always run&quot;</span><br><span class="hljs-comment"># This will always run</span><br><br><span class="hljs-literal">false</span> ; <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;This will always run&quot;</span><br><span class="hljs-comment"># This will always run</span><br></code></pre></td></tr></table></figure><p><strong>command substitution</strong><br><code>$(CMD)</code> will execute CMD, get the output of the command and substitute it in place.<br><code>for file in $(ls)</code> will first call ls and then iterate over those values.</p><p><strong>process substitution</strong><br><code>&lt;(CMD)</code> will execute CMD and place the output in a temporary file and substitute the &lt;() with that file’s name.<br><code>diff &lt;(ls foo) &lt;(ls bar)</code> will show differences between files in dirs foo and bar.</p><p>Example:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Starting program at <span class="hljs-subst">$(date)</span>&quot;</span> <span class="hljs-comment"># Date will be substituted</span><br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Running program <span class="hljs-variable">$0</span> with <span class="hljs-variable">$#</span> arguments with pid $$&quot;</span><br><br><span class="hljs-keyword">for</span> file <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;<span class="hljs-variable">$@</span>&quot;</span>; <span class="hljs-keyword">do</span><br>    grep foobar <span class="hljs-string">&quot;<span class="hljs-variable">$file</span>&quot;</span> &gt; /dev/null 2&gt; /dev/null <span class="hljs-comment"># 标准输出和标准错误都重定向到/dev/null</span><br>    <span class="hljs-comment"># When pattern is not found, grep has exit status 1</span><br>    <span class="hljs-comment"># We redirect STDOUT and STDERR to a null register since we do not care about them</span><br>    <span class="hljs-keyword">if</span> [[ $? -ne 0 ]]; <span class="hljs-keyword">then</span><br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;File <span class="hljs-variable">$file</span> does not have any foobar, adding one&quot;</span><br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;# foobar&quot;</span> &gt;&gt; <span class="hljs-string">&quot;<span class="hljs-variable">$file</span>&quot;</span><br>    <span class="hljs-keyword">fi</span><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><div class="note note-info">            <p>try to use double brackets [[ ]] in favor of simple brackets [ ]</p>          </div><h2 id="shell-globbing-Wildcards-替换单个字符-替换后面所有字符-Curly-braces"><a href="#shell-globbing-Wildcards-替换单个字符-替换后面所有字符-Curly-braces" class="headerlink" title="shell globbing- Wildcards  - ?替换单个字符  - *替换后面所有字符- Curly braces {}"></a><strong>shell globbing</strong><br>- Wildcards<br>  - <code>?</code>替换单个字符<br>  - <code>*</code>替换后面所有字符<br>- Curly braces <code>&#123;&#125;</code></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">convert image.&#123;png,jpg&#125;<br><span class="hljs-comment"># Will expand to</span><br>convert image.png image.jpg<br><br><span class="hljs-built_in">cp</span> /path/to/project/&#123;foo,bar,baz&#125;.sh /newpath<br><span class="hljs-comment"># Will expand to</span><br><span class="hljs-built_in">cp</span> /path/to/project/foo.sh /path/to/project/bar.sh /path/to/project/baz.sh /newpath<br><br><span class="hljs-comment"># Globbing techniques can also be combined</span><br><span class="hljs-built_in">mv</span> *&#123;.py,.sh&#125; folder<br><span class="hljs-comment"># Will move all *.py and *.sh files</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vim</title>
    <link href="/2023/01/13/Vim/"/>
    <url>/2023/01/13/Vim/</url>
    
    <content type="html"><![CDATA[<h1 id="Modal-editing"><a href="#Modal-editing" class="headerlink" title="Modal editing"></a>Modal editing</h1><ul><li><strong>Normal</strong>: for moving around a file and making edits</li><li><strong>Insert</strong>: <code>i</code> for inserting text</li><li><strong>Replace</strong>: <code>R</code> for replacing text</li><li><strong>Visual</strong>: (plain<code>v</code>, line<code>V</code>, or block<code>Ctrl+v</code>): for selecting blocks of text(use movement keys).</li><li><strong>Command-line</strong>: <code>:</code> for running a command</li></ul><p><code>&lt;ESC&gt;</code>  switch from any mode back to <strong>Normal mode</strong>.</p><h1 id="Basic"><a href="#Basic" class="headerlink" title="Basic"></a>Basic</h1><h2 id="Command-line"><a href="#Command-line" class="headerlink" title="Command-line"></a>Command-line</h2><ul><li><code>:q</code> quit (close window)</li><li><code>:w</code> save (“write”)</li><li><code>:wq</code> save and quit</li><li><code>:e &#123;name of file&#125;</code> open file for editing</li><li><code>:ls</code> show open buffers</li><li><code>:help &#123;topic&#125;</code> open help<ul><li><code>:help :w</code> opens help for the <code>:w</code> command</li><li><code>:help w</code> opens help for the <code>w</code> movement</li></ul></li></ul><h1 id="Vim’s-interface-is-a-programming-language"><a href="#Vim’s-interface-is-a-programming-language" class="headerlink" title="Vim’s interface is a programming language"></a>Vim’s interface is a programming language</h1><h2 id="Movement"><a href="#Movement" class="headerlink" title="Movement"></a>Movement</h2><p><strong>Movements in Vim are also called “nouns”.</strong></p><ul><li>Basic movement: <code>hjkl</code> (left, down, up, right)</li><li>Words: <code>w</code> (next word), <code>b</code> (beginning of word), <code>e</code> (end of word)</li><li>Lines: <code>0</code> (beginning of line), <code>^</code> (first non-blank character), <code>$</code> (end of line)</li><li>Screen: <code>H</code> (top of screen), <code>M</code> (middle of screen), <code>L</code> (bottom of screen)</li><li>Scroll: <code>Ctrl-u</code> (up), <code>Ctrl-d</code> (down)</li><li>File: <code>gg</code> (beginning of file), <code>G</code> (end of file)</li><li>Line numbers: <code>:&#123;number&#125;&lt;CR&gt;</code> or <code>&#123;number&#125;G</code> (line {number})</li><li>Misc: <code>%</code> (corresponding item)</li><li>Find: <code>f&#123;character&#125;</code>, <code>t&#123;character&#125;</code>, <code>F&#123;character&#125;</code>, <code>T&#123;character&#125;</code><ul><li>find&#x2F;to forward&#x2F;backward {character} on the current line</li><li><code>,</code> &#x2F; <code>;</code> for navigating matches</li></ul></li><li>Search: <code>/&#123;regex&#125;</code>, <code>n</code> &#x2F; <code>N</code> for navigating matches</li></ul><h2 id="Edits"><a href="#Edits" class="headerlink" title="Edits"></a>Edits</h2><p><strong>Vim’s editing commands are also called “verbs”</strong></p><ul><li><code>i</code> enter Insert mode</li><li><code>o</code> &#x2F; <code>O</code> insert line below &#x2F; above</li><li><code>d&#123;motion&#125;</code> delete {motion}<ul><li>e.g. <code>dw</code> is delete word, <code>d$</code> is delete to end of line, <code>d0</code> is delete to beginning of line</li></ul></li><li><code>c&#123;motion&#125;</code> change {motion}<ul><li>e.g. <code>cw</code> is change word. like <code>d&#123;motion&#125;</code> followed by <code>i</code></li></ul></li><li><code>x</code> delete character (equal do <code>dl</code>)</li><li><code>s</code> substitute character (equal to <code>cl</code>)</li><li>Visual mode + manipulation<ul><li>select text, <code>d</code> to delete it or <code>c</code> to change it</li></ul></li><li><code>u</code> to undo, <code>&lt;Ctrl+r&gt;</code> to redo</li><li><code>y</code> to copy &#x2F; “yank” (some other commands like <code>d</code> also copy)</li><li><code>p</code> to paste</li><li>Lots more to learn: e.g. <code>~</code> flips the case of a character</li></ul><h2 id="Counts"><a href="#Counts" class="headerlink" title="Counts"></a>Counts</h2><p>You can combine <strong>nouns</strong> and <strong>verbs</strong> with a <strong>count</strong>, which will perform a given action a number of times.</p><ul><li><code>3w</code> move 3 words forward</li><li><code>5j</code> move 5 lines down</li><li><code>7dw</code> delete 7 words</li></ul><h2 id="Modifiers"><a href="#Modifiers" class="headerlink" title="Modifiers"></a>Modifiers</h2><p>You can use modifiers to change the meaning of a noun. Some modifiers are <code>i</code>, which means “inner” or “inside”, and <code>a</code>, which means “around”.</p><blockquote><p>光标在括号中，<code>ci(</code>可以把括号内的内容替换并进入insert，类似<code>di(</code>也一样，相当于删除。<code>da(</code>连带括号一起删除。</p><p>这里的<code>i</code>和<code>a</code>不是edit中的含义，而是<strong>inner</strong>和<strong>around</strong>的意思。</p></blockquote><ul><li><code>ci(</code> change the contents inside the current pair of parentheses</li><li><code>ci[</code> change the contents inside the current pair of square brackets</li><li><code>da&#39;</code> delete a single-quoted string, including the surrounding single quotes</li></ul><h1 id="Customizing-Vim"><a href="#Customizing-Vim" class="headerlink" title="Customizing Vim"></a>Customizing Vim</h1><p><a href="https://github.com/YC-Xiang/dotfiles/blob/main/vim/.vimrc">my vim config</a></p><h1 id="Extending-Vim"><a href="#Extending-Vim" class="headerlink" title="Extending Vim"></a>Extending Vim</h1><p>Vim 8.0 之后自带插件管理工具，只要create the directory <code>~/.vim/pack/vendor/start/</code>, and put plugins in there (e.g. via <code>git clone</code>). <code>vendor</code>目录名好像可以替换。</p><h1 id="Advanced-Vim"><a href="#Advanced-Vim" class="headerlink" title="Advanced Vim"></a>Advanced Vim</h1><h2 id="Search-and-replace"><a href="#Search-and-replace" class="headerlink" title="Search and replace"></a>Search and replace</h2><p><code>:s</code> (substitute) command</p><ul><li><code>%s/foo/bar/g</code><ul><li>replace foo with bar globally in file</li><li><code>%s/\[.*\](\(.*\))/\1/g</code></li><li>replace named Markdown links with plain URL</li></ul></li></ul><h2 id="Multiple-windows"><a href="#Multiple-windows" class="headerlink" title="Multiple windows"></a>Multiple windows</h2><ul><li><code>:sp</code> &#x2F; <code>:vsp</code> to split windows</li><li>Can have multiple views of the same buffer.</li></ul><h2 id="Macros"><a href="#Macros" class="headerlink" title="Macros"></a>Macros</h2><p>to do</p><h1 id="Resources"><a href="#Resources" class="headerlink" title="Resources"></a>Resources</h1><p><a href="https://vim-adventures.com/">Vim Adventures</a> is a game to learn Vim</p>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vim</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>正则表达式</title>
    <link href="/2023/01/12/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <url>/2023/01/12/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="https://regexone.com/">RegexOne</a></p><p><a href="https://github.com/ziishaned/learn-regex/blob/master/translations/README-cn.md">github正则表达式</a></p><p><img src="https://xyc-1316422823.cos.ap-shanghai.myqcloud.com/RISC-V%E4%B8%AD%E6%96%87%E6%89%8B%E5%86%8C/20230112170412.png"></p><h1 id="Tutorials"><a href="#Tutorials" class="headerlink" title="Tutorials"></a>Tutorials</h1><h2 id="Lesson-1-The-123s"><a href="#Lesson-1-The-123s" class="headerlink" title="Lesson 1 The 123s"></a>Lesson 1 The 123s</h2><p><code>\d</code>any single digit character</p><p><code>\D</code>any single non-digit character</p><h2 id="Lesson-2-The-Dot"><a href="#Lesson-2-The-Dot" class="headerlink" title="Lesson 2: The Dot"></a>Lesson 2: The Dot</h2><p><code>.</code>any single character</p><p><code>\.</code>period</p><h2 id="Lesson-3-Matching-specific-characters"><a href="#Lesson-3-Matching-specific-characters" class="headerlink" title="Lesson 3: Matching specific characters"></a>Lesson 3: Matching specific characters</h2><p><code>[abc]</code>only a, b, c single character</p><h2 id="Lesson-4-Excluding-specific-characters"><a href="#Lesson-4-Excluding-specific-characters" class="headerlink" title="Lesson 4: Excluding specific characters"></a>Lesson 4: Excluding specific characters</h2><p><code>[^abc]</code>not a, b or c</p><h2 id="Lesson-5-Character-ranges"><a href="#Lesson-5-Character-ranges" class="headerlink" title="Lesson 5: Character ranges"></a>Lesson 5: Character ranges</h2><p><code>[a-z]</code>characters a to z</p><p><code>[0-9]</code>number 0 to 9</p><p><code>\w</code>字母，数字，下划线。等价于<code>[A-Za-z0-9_]</code></p><p><code>\W</code>等价于<code>\[^A-Za-z0-9_]</code></p><h2 id="Lesson-6-Catching-some-zzz’s"><a href="#Lesson-6-Catching-some-zzz’s" class="headerlink" title="Lesson 6: Catching some zzz’s"></a>Lesson 6: Catching some zzz’s</h2><p><code>&#123;m&#125;</code>m repetitions</p><p><code>&#123;m, n&#125;</code>m to n repetitions</p><p>Examples:</p><p><code>w&#123;3&#125;</code> (three w)</p><p><code>[wxy]&#123;5&#125;</code> (five characters, each of which can be a w, x, or y)</p><h2 id="Lesson-7-Mr-Kleene-Mr-Kleene"><a href="#Lesson-7-Mr-Kleene-Mr-Kleene" class="headerlink" title="Lesson 7: Mr. Kleene, Mr. Kleene"></a>Lesson 7: Mr. Kleene, Mr. Kleene</h2><p><code>*</code> <strong>zero</strong> or more repetitions *前的字符可以重复0次或者更多次</p><p><code>+</code><strong>one</strong> or more repetitions +前的字符可以重复0次或者更多次</p><p>Match<code>aaaabcc</code></p><p>Match<code>aabbbbc</code></p><p>Match<code>aacc</code></p><p>Skip<code>a</code></p><p>answer: <code>aa+b*c+</code></p><h2 id="Lesson-8-Characters-optional"><a href="#Lesson-8-Characters-optional" class="headerlink" title="Lesson 8: Characters optional"></a>Lesson 8: Characters optional</h2><p><code>?</code>optional character ?前的字符可以出现0次或者1次</p><p><code>ab?c</code> will match either the strings “<code>abc</code>“ or “<code>ac</code>“</p><h2 id="Lesson-9-All-this-whitespace"><a href="#Lesson-9-All-this-whitespace" class="headerlink" title="Lesson 9: All this whitespace"></a>Lesson 9: All this whitespace</h2><p><code>\s</code>代替any whitespace 包括space, tab(\t), new line(\n), return(\r)</p><p><code>\S</code>相反</p><h2 id="Lesson-10-Starting-and-ending"><a href="#Lesson-10-Starting-and-ending" class="headerlink" title="Lesson 10: Starting and ending"></a>Lesson 10: Starting and ending</h2><p><code>^...$</code>starts and ends</p><p><code>^Mission: successful$</code>文本必须以Mission: 开头, successful结尾</p><h2 id="Lesson-11-Match-groups"><a href="#Lesson-11-Match-groups" class="headerlink" title="Lesson 11: Match groups"></a>Lesson 11: Match groups</h2><p><code>(...)</code>capture group</p><p><code>(a(bc))</code>capture sub-group</p><p><code>(.*)</code>capture all</p><h2 id="Lesson-14-It’s-all-conditional"><a href="#Lesson-14-It’s-all-conditional" class="headerlink" title="Lesson 14: It’s all conditional"></a>Lesson 14: It’s all conditional</h2><p><code>(abc|def)</code>matches abc or def</p><h1 id="Problems"><a href="#Problems" class="headerlink" title="Problems"></a>Problems</h1><h2 id="Problem-1-Matching-a-decimal-numbers"><a href="#Problem-1-Matching-a-decimal-numbers" class="headerlink" title="Problem 1: Matching a decimal numbers"></a>Problem 1: Matching a decimal numbers</h2><table><thead><tr><th>Task</th><th>Text</th></tr></thead><tbody><tr><td>Match</td><td>3.14529</td></tr><tr><td>Match</td><td>-255.34</td></tr><tr><td>Match</td><td>128</td></tr><tr><td>Match</td><td>1.9e10</td></tr><tr><td>Match</td><td>123,340.00</td></tr><tr><td>Skip</td><td>720p</td></tr></tbody></table><p>answer:<code>^-?\d+(,\d+)*(\.\d+(e\d+)?)?$</code></p><h2 id="Problem-2-Matching-phone-numbers"><a href="#Problem-2-Matching-phone-numbers" class="headerlink" title="Problem 2: Matching phone numbers"></a>Problem 2: Matching phone numbers</h2><p>后面还有很多problems</p>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>正则表示式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>沉默的大多数</title>
    <link href="/2023/01/11/reading/%E6%80%9D%E7%BB%B4%E7%9A%84%E4%B9%90%E8%B6%A3/"/>
    <url>/2023/01/11/reading/%E6%80%9D%E7%BB%B4%E7%9A%84%E4%B9%90%E8%B6%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="思维的乐趣"><a href="#思维的乐趣" class="headerlink" title="思维的乐趣"></a>思维的乐趣</h1><p>假如一个人每天吃一样的饭，干一样的活，再加上把八个样板戏翻过来倒过去地看，看到听了上句就知道下句的程度，就值得我最大的同情。我最赞同罗素先生的一句话：“须知参差多态，乃是幸福本源”。</p><p>在我们生活的这个世界上，最大的不幸就是有些人完全拒绝新奇。</p><p>这世界上有人喜欢丰富，有人喜欢单纯；我未见过喜欢丰富的人妒恨，伤害喜欢单纯的人，我见到的情形总是相反。</p><p>据此我认为我们国家自汉代以后，一直在进行思想上的大屠杀；而我能够这样想，只说明我是幸存者之一。除了对此表示悲伤之外，我想不到别的了。</p>]]></content>
    
    
    <categories>
      
      <category>Reading</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>ICS_2022 PA1</title>
    <link href="/2023/01/10/ICS2022%20PA1/"/>
    <url>/2023/01/10/ICS2022%20PA1/</url>
    
    <content type="html"><![CDATA[<h2 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h2><p><a href="https://www.jianshu.com/p/ae4ae0ef57bc">getopt_long函数</a></p><p><code>strtok</code>函数：分割字符串</p><p><code>atoi</code>函数：字符串数字转为int类型。</p><p><code>strtol</code>函数：可以根据字符串数字为十进制&#x2F;十六进制…，并转化为<code>long int</code>。如<code>strtol(0xabc, NULL, 16)</code>。</p><p>打印<code>unsigned int</code>使用<code>%u</code></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-comment"># nemu/scripts/native.mk</span><br><br><span class="hljs-section">compile_git:</span><br>  <span class="hljs-variable">$(<span class="hljs-built_in">call</span> git_commit, &quot;compile NEMU&quot;)</span><br><span class="hljs-variable">$(BINARY)</span>: compile_git<br><br><span class="hljs-keyword">override</span> ARGS ?= --log=<span class="hljs-variable">$(BUILD_DIR)</span>/nemu-log.txt<br><span class="hljs-keyword">override</span> ARGS += <span class="hljs-variable">$(ARGS_DIFF)</span> <span class="hljs-comment"># nemu/tools/difftest.mk中CONFIG_DIFFTEST未定义，所以ARGS_DIFF不存在</span><br><br>IMG ?=<br><br>NEMU_EXEC := <span class="hljs-variable">$(BINARY)</span> <span class="hljs-variable">$(ARGS)</span> <span class="hljs-variable">$(IMG)</span><br><br><span class="hljs-section">run: run-env</span><br>  <span class="hljs-variable">$(<span class="hljs-built_in">call</span> git_commit, &quot;run NEMU&quot;)</span><br>  <span class="hljs-variable">$(NEMU_EXEC)</span><br><br></code></pre></td></tr></table></figure><p>由makefile可知，输入<code>make run</code>启动nemu时，传递给<code>monitor.c parse_args(argc, argv)</code>的参数为<br><code>--log=$(BUILD_DIR)/nemu-log.txt</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span> &#123;<br>    init_monitor(argc, argv);<br>    parse_args(argc, argv);<br>      init_rand();<br>      init_log(log_file);<br>      init_mem(); <span class="hljs-comment">// 随机初始化内存</span><br>    init_isa();<br>      <span class="hljs-built_in">memcpy</span>(guest_to_host(RESET_VECTOR), img, <span class="hljs-keyword">sizeof</span>(img)); <span class="hljs-comment">//加载内置客户程序</span><br>      restart(); <span class="hljs-comment">// 初始化pc和0寄存器</span><br>      <span class="hljs-type">long</span> img_size = load_img();<br>    init_sdb();<br>    welcome();<br>    engine_start();<br>     sdb_mainloop();<br>        str = rl_gets(); <span class="hljs-comment">// 获取在(nemu)中输入的字符串</span><br>      <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(cmd, cmd_table[i].name) == <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">// 根据输入的字符串调用不同的handler函数</span><br>        <span class="hljs-keyword">if</span> (cmd_table[i].handler(args) &lt; <span class="hljs-number">0</span>) &#123; <span class="hljs-keyword">return</span>; &#125;<br>      <span class="hljs-keyword">break</span>;<br>      cmd_c();<br>        cpu_exec();<br>          execute(n);<br>            exec_once(&amp;s, cpu.pc);<br>              isa_exec_once(s);<br>            trace_and_difftest(&amp;s, cpu.pc);<br>      cmd_q();<br>      cmd_si();<br>      cmd_info();<br>      cmd_x();<br>      cmd_help();<br>      &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ICS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RISC-V手册 第十章 RISC-V特权架构</title>
    <link href="/2023/01/09/RISC-V%E7%AC%AC%E5%8D%81%E7%AB%A0/"/>
    <url>/2023/01/09/RISC-V%E7%AC%AC%E5%8D%81%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="10-1-导言"><a href="#10-1-导言" class="headerlink" title="10.1 导言"></a>10.1 导言</h2><p>到目前为止，本书主要关注RISC-V 对通用计算的支持：我们引入的所有指令都在用户模式（User mode 应用程序的代码在此模式下运行）下可用。本章介绍两种新的权限模式：运行最可信的代码的机器模式（machine mode），以及为Linux，FreeBSD 和Windows 等操作系统提供支持的监管者模式（supervisor mode）。</p><p>图10.1是RISC-V 特权指令的图形表示，图10.2列出了这些指令的操作码。显然，特权架构添加的指令非常少。作为替代，几个新的控制状态寄存器（CSR）显示了附加的功能。</p><p><img src="https://xyc-1316422823.cos.ap-shanghai.myqcloud.com/RISC-V%E4%B8%AD%E6%96%87%E6%89%8B%E5%86%8C/10.1.png"></p><h2 id="10-2-简单嵌入式系统的机器模式"><a href="#10-2-简单嵌入式系统的机器模式" class="headerlink" title="10.2 简单嵌入式系统的机器模式"></a>10.2 简单嵌入式系统的机器模式</h2><p>机器模式（缩写为M模式， M-mode）是 RISC-V中（hart hardware thread，硬件线程）可以执行的最高权限模式。程）可以执行的最高权限模式。在M模式下运行的hart对内存，I&#x2F;O和一些对于启动和配置系统来说必要的底层功能有着完全的使用权。因此它是唯一所有标准RISC-V处理器都必须实现的权限模式。实际上简单的 RISC-V微控制器仅支持 M模式。</p><p>机器模式最重要的特性是拦截和处理异常的能力。RISC-V将异常分为两类。一类是同步异常。另一类是中断，它是与指令流异步的外部事件，比如鼠标的单击。</p><p>在 M模式运行期间可能发生的同步异常有五种：</p><ul><li><p>访问错误异常：当物理内存的地址不支持访问类型时发生（例如尝试写入 ROM）。</p></li><li><p>断点异常：在执行 ebreak指令，或者地址或数据与调试触发器匹配时发生。</p></li><li><p>环境调用异常：在执行 ecall指令时发生。</p></li><li><p>非法指令异常：在译码阶段发现无效操作码时发生。</p></li><li><p>非对齐地址异常：在有效地址不能被访问大小整除时发生，例如地址为0x12的amoadd.w。</p></li></ul><p><img src="https://xyc-1316422823.cos.ap-shanghai.myqcloud.com/RISC-V%E4%B8%AD%E6%96%87%E6%89%8B%E5%86%8C/10.3.png"></p><p>有三种标准的中断源：软件、时钟和外部来源。软件中断通过向内存映射寄存器中存数来触发。</p><h2 id="10-3-机器模式下的异常处理"><a href="#10-3-机器模式下的异常处理" class="headerlink" title="10.3 机器模式下的异常处理"></a>10.3 机器模式下的异常处理</h2><p>八个控制状态寄存器（CSR）是机器模式下异常处理的必要部分：</p><ul><li>mtvec (Machine Trap Vector) 它保存发生异常时处理器需要跳转到的地址。</li><li>mepc (Machine Exception PC) 它指向发生异常的指令。</li><li>mcause (Machine Exception Cause) 它指示发生异常的种类。</li><li>mie (Machine Interrupt Enable) 它指出处理器目前能处理和必须忽略的中断。</li><li>mip (Machine Interrupt Pending) 它列出目前正准备处理的中断。</li><li>mtval (Machine Trap Value) 它保存了陷入 trap 的附加信息：地址例外中出错的地址、发生非法指令例外的指令本身，对于其他异常，它的值为 0。</li><li>mscratch (Machine Scratch) 它暂时存放一个字大小的数据。</li><li>mstatus (Machine Status) 它保存全局中断使能，以及许多其他的状态，如图10.4所示。</li></ul><p><img src="https://xyc-1316422823.cos.ap-shanghai.myqcloud.com/RISC-V%E4%B8%AD%E6%96%87%E6%89%8B%E5%86%8C/10.4.png"></p><p>处理器在M模式下运行时，只有在全局中断使能位mstatus.MIE置1时才会产生中断。此外，每个中断在控制状态寄存器mie中都有自己的使能位。这些位在mie中的位置对应于图10.3中的中断代码。例如，mie[7]对应于M模式中的时钟中断。控制状态寄存器mip具有相同的布局，并且它指示当前待处理的中断。。将所有三个控制状态寄存器合在一起考虑，如果 mstatus.MIE &#x3D; 1，mie[7] &#x3D; 1，且 mip[7] &#x3D; 1，则可以处理机器的时钟中断。</p><p>当一个hart发生异常时，硬件自动经历如下的状态转换：</p><div class="note note-info">            <p>hart是硬件线程 (hardware thread) 的缩略形式 。我们用该术语将它们与大多数程序员熟悉的软件线程区分开来。软件线程在 harts上进行分时复用。大多数处理器核都只有一个hart。</p>          </div><ul><li><p>异常指令的PC被保存在mepc中，PC被设置为 mtvec。（对于同步异常， mepc指向导致异常的指令；对于中断，它指向中断处理后应该恢复执行的位置。）</p></li><li><p>根据异常来源设置 mcause（如图 10.3所示），并将 mtval设置为出错的地址或者其它适用于特定异常的信息字。</p></li><li><p>把控制状态寄存器 mstatus中的 MIE位置零以禁用中断，并把先前的 MIE值保留到 MPIE中。</p></li><li><p>发生异常之前的权限模式保留在mstatus的MPP域中，再把权限模式更改为M。图 10.5显示了MPP域的编码（如果处理器仅实现M模式，则有效地跳过这个步骤）。</p></li></ul><p><img src="https://xyc-1316422823.cos.ap-shanghai.myqcloud.com/RISC-V%E4%B8%AD%E6%96%87%E6%89%8B%E5%86%8C/10.5.png" alt="img"></p><p>为避免覆盖整数寄存器中的内容，中断处理程序先在最开始用mscratch和整数寄存器（例如 a0）中的值交换。通常，软件会让 mscratch包含指向附加临时内存空间的指针，处理程序用该指针来保存其主体中将会用到的整数寄存器。在主体执行之后，中断程序会恢复它保存到内存中的寄存器，然后再次使用 mscratch和 a0交换，将两个寄存器恢复到它们在发生异常之前的值。最后，处理程序用 mret指令（ M模式特有的指令）返回。 mret将 PC设置为mepc，通过将mstatus的 MPIE域复制到MIE来恢复之前的中断使能设置，并将权限模式设置为 mstatus的MPP域中的值。这基本是前一段中描述的逆操作。</p><p>图10.6展示了遵循此模式的基本时钟中断处理程序的 RISC-V汇编代码。</p><p><img src="https://xyc-1316422823.cos.ap-shanghai.myqcloud.com/RISC-V%E4%B8%AD%E6%96%87%E6%89%8B%E5%86%8C/10.6.png"></p><p>除了上面介绍的mret指令之外，M模式还提供了另外一条指令：wfi (Wait For Interrupt)。 wfi通 知处理器目前没有任何有用的工作，所有它应该进入低功耗模式，直到任何使能有效的中断等待处理，即 mie&amp;mip≠0。</p><div class="note note-info">            <p>操作 CSR 的指令在 RISC-V 的 <code>Zicsr</code> 扩展模块中定义。包括伪指令在内，共有以下 7 种操作类型：</p><ol><li><code>csrr</code>，读取一个 CSR 的值到通用寄存器。如：<code>csrr t0, mstatus</code>，读取 <code>mstatus</code> 的值到 <code>t0</code> 中。</li><li><code>csrw</code>，把一个通用寄存器中的值写入 CSR 中。如：<code>csrw mstatus, t0</code>，将 <code>t0</code> 的值写入 <code>mstatus</code>。</li><li><code>csrs</code>，把 CSR 中指定的 bit 置 1。如：<code>csrsi mstatus, (1 &lt;&lt; 2)</code>，将 <code>mstatus</code> 的右起第 3 位置 1。</li><li><code>csrc</code>，把 CSR 中指定的 bit 置 0。如：<code>csrci mstatus, (1 &lt;&lt; 2)</code>，将 <code>mstatus</code> 的右起第 3 位置 0。</li><li><code>csrrw</code>，读取一个 CSR 的值到通用寄存器，然后把另一个值写入该 CSR。如：<code>csrrw t0, mstatus, t0</code>，将 <code>mstatus</code> 的值与 <code>t0</code> 的值交换。</li><li><code>csrrs</code>，读取一个 CSR 的值到通用寄存器，然后把该 CSR 中指定的 bit 置 1。</li><li><code>csrrc</code>，读取一个 CSR 的值到通用寄存器，然后把该 CSR 中指定的 bit 置 0。</li></ol>          </div><h2 id="10-4-嵌入式系统中的用户模式和进程隔离"><a href="#10-4-嵌入式系统中的用户模式和进程隔离" class="headerlink" title="10.4 嵌入式系统中的用户模式和进程隔离"></a>10.4 嵌入式系统中的用户模式和进程隔离</h2><p>必须禁止不可信的代码执行特权指令（如 mret）和访问特权控制状态寄存器（如mstatus），因为这将允许程序控制系统。这样的限制很容易实现，只要加入一种额外的权限模式： 用户模式（U模式）。这种模式拒绝使用这些功能，并在尝试执行M模式指令或访问CSR的时候产生非法指令异常。其它时候，U模式和M模式的表现十分相似。通过将mstatus.MPP设置为U（如图 10.5所示，编码为 0），然后执行mret指令，软件可以从M模式进入U模式。如果在U模式下发生异常，则把控制移交给M模式。</p><p>这些不可信的代码还必须被限制只能访问自己那部分内存。实现了M和U模式的处理器具有一个叫做<strong>物理内存保护</strong> （PMP Physical Memory Protection）的功能，允许M模式指定U模式可以访问的内存地址。PMP包括几个地址寄存器（通常为8到16个）和相应的配置寄存器。这些配置寄存器可以授予或拒绝读、写和执行权限。当处于U模式的处理器尝试取指或执行load或 store操作时，将地址和所有的PMP地址寄存器比较。</p><p>图 10.7显示了PMP地址寄存器和配置寄存器的布局。两者都是CSR。地址寄存器右移两位，因为PMP以四字节为单位。配置寄存器密集地填充在CSR中以加速上下文切换，如图10.8所示。</p><p><img src="https://xyc-1316422823.cos.ap-shanghai.myqcloud.com/RISC-V%E4%B8%AD%E6%96%87%E6%89%8B%E5%86%8C/10.7.png"></p><h2 id="10-5-现代操作系统的监管者模式"><a href="#10-5-现代操作系统的监管者模式" class="headerlink" title="10.5 现代操作系统的监管者模式"></a>10.5 现代操作系统的监管者模式</h2><p>更复杂的 RISC-V处理器用和几乎所有通用架构相同的方式处理这些问题：使用基于页面的虚拟内存。这个功能构成了监管者模式（S模式）的核心，这是一种可选的权限模式，旨在支持现代类Unix操作系统，如Linux。S模式比 U模式权限更高，但比M模式低。与U模式一样，S模式下运行的软件不能使用M模式的CSR和指令，并且受到PMP的限制。</p><p>mideleg（Machine Interrupt Delegation），机器中断委托 CSR控制将哪些中断委托给S模式。与mip和mie一样，mideleg中的每个位对应于图10.3中相同的异常。例如，mideleg[5]对应于S模式的时钟中断，如果把它置位，S模式的时钟中断将会移交S模式的异常处理程序，而不是M模式的异常处理程序。</p><p>委托给S模式的任何中断都可以被S模式的软件屏蔽。sie (Supervisor Interrupt enable) 和sip (Superivisor Interrupt pending) CSR是S模式的控制状态寄存器。他们是mie和mip的子集。它们有着和M模式下相同的布局，但在sie和sip中只有与由mideleg委托的中断对应的位才能读写。那些没有被委派的中断对应的位始终为零。</p>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>RISC-V</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RISC-V手册 第三、四章 RISC-V汇编语言，乘法和除法指令</title>
    <link href="/2023/01/06/RISC-V%E7%AC%AC%E4%B8%89%E5%9B%9B%E7%AB%A0/"/>
    <url>/2023/01/06/RISC-V%E7%AC%AC%E4%B8%89%E5%9B%9B%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="第三章-RISC-V汇编语言"><a href="#第三章-RISC-V汇编语言" class="headerlink" title="第三章 RISC-V汇编语言"></a>第三章 RISC-V汇编语言</h1><h2 id="3-2-函数调用规范"><a href="#3-2-函数调用规范" class="headerlink" title="3.2 函数调用规范"></a>3.2 函数调用规范</h2><p><img src="https://xyc-1316422823.cos.ap-shanghai.myqcloud.com/RISC-V%E4%B8%AD%E6%96%87%E6%89%8B%E5%86%8C/%E5%9B%BE3.2.png" alt="图3.2"></p><h2 id="3-3-汇编器"><a href="#3-3-汇编器" class="headerlink" title="3.3 汇编器"></a>3.3 汇编器</h2><p>这类指令在巧妙配置常规指令的基础上实现，称为<strong>伪指令</strong>。图 3.3和 3.4列出了 RISC-V伪指令。</p><p>汇编程序的开头是一些汇编指示符，它们是汇编器的命令。图 3.9是RISC-V的汇编指示符。其中图 3.6中用到的指示符有：</p><ul><li>.text：进入代码段。</li><li>.align 2：后续代码按2^2字节对齐。</li><li>.globl main：声明全局符号 “main”</li><li>.section .rodata：进入只读数据段</li><li>.balign 4：数据段按4字节对齐</li><li>.string “Hello, %s!\n”: 创建空字符结尾的字符串</li><li>.string “world”: 创建空字符结尾的字符串</li></ul><p><img src="https://xyc-1316422823.cos.ap-shanghai.myqcloud.com/RISC-V%E4%B8%AD%E6%96%87%E6%89%8B%E5%86%8C/%E5%9B%BE3.3.png" alt="图3.3"></p><p><img src="https://xyc-1316422823.cos.ap-shanghai.myqcloud.com/RISC-V%E4%B8%AD%E6%96%87%E6%89%8B%E5%86%8C/%E5%9B%BE3.4.png" alt="图3.4"></p><p><img src="https://xyc-1316422823.cos.ap-shanghai.myqcloud.com/RISC-V%E4%B8%AD%E6%96%87%E6%89%8B%E5%86%8C/%E5%9B%BE3.6.png" alt="图3.6"></p><h2 id="3-4-链接器"><a href="#3-4-链接器" class="headerlink" title="3.4 链接器"></a>3.4 链接器</h2><p><img src="https://xyc-1316422823.cos.ap-shanghai.myqcloud.com/RISC-V%E4%B8%AD%E6%96%87%E6%89%8B%E5%86%8C/3.9.png" alt="图3.9"></p><p><img src="https://xyc-1316422823.cos.ap-shanghai.myqcloud.com/RISC-V%E4%B8%AD%E6%96%87%E6%89%8B%E5%86%8C/3.10.png" alt="图3.10"></p><h2 id="3-5-静态链接和动态链接"><a href="#3-5-静态链接和动态链接" class="headerlink" title="3.5 静态链接和动态链接"></a>3.5 静态链接和动态链接</h2><p>上一节对 静态链接进行了说明，在程序运行前所有的库都进行了链接和加载。如果这样的库很大，链接一个库到多个程序中会十分占用内存。另外，链接时库是绑定的，即使它们后来的更新修复了 bug，强制的静态链接的代码仍然会使用旧的、有bug的版本。</p><p>为了解决这两个问题，现在的许多系统使用动态链接，外部的函数在第一次被调用时才会加载和链接。后续所有调用都使用快速链接，因此只会产生一次动态开销。每次程序开始运行，它都会按照需要链接最新版本的库函数。另外，如果多个程序使用了同一个动态链接库，库代码在内存中只会加载一次。</p><p>编译器产生的代码和静态链接的代码很相似。其不同之处在于，跳转的目标不是实际的函数，而是一个只有三条指令的存根函数（ stub function）。存根函数会从内存中的一个表中加载实际的函数的地址并跳转。不过，在第一次调用时，表中还没有实际的函数的地址，只有一个动态链接的过程的地址。当这个动态链接过程被调用时，动态链接器通过符号表找到实际要调用的函数，复制到内存中，更新记录实际的函数地址的表。后续的每次调用的开销就是存根函数的三条指令的开销。</p><h1 id="第四章-乘法和除法指令"><a href="#第四章-乘法和除法指令" class="headerlink" title="第四章 乘法和除法指令"></a>第四章 乘法和除法指令</h1><p>RV32M向RV32I中添加了整数乘法和除法指令。图4.1是RV32M扩展指令集的图形表示，图4.2列出了它们的操作码。</p><p>RV32M具有有符号和无符号整数的除法指令：divide(div)和divide unsigned(divu)，它们将商放入目标寄存器。在少数情况下，程序员需要余数而不是商，因此RV32M提供remainder(rem)和remainder unsigned(remu)，它们在目标寄存器写入余数，而不是商。</p><p><img src="https://xyc-1316422823.cos.ap-shanghai.myqcloud.com/RISC-V%E4%B8%AD%E6%96%87%E6%89%8B%E5%86%8C/4.1.png" alt="图4.1"></p><p><img src="https://xyc-1316422823.cos.ap-shanghai.myqcloud.com/RISC-V%E4%B8%AD%E6%96%87%E6%89%8B%E5%86%8C/4.2.png" alt="图4.2"></p><p>将两个32位数相乘得到的是64位的乘积。为了正确地得到一个有符号或无符号的64位积，RISC-V中带有四个乘<br>法指令。要得到整数要得到整数32位乘积（ 64位中的低 32位）就用 mul指令。要得到高32位，如果操作数都是有符号数，就用mulh指令；如果操作数都是无符号数，就用mulhu指令。指令；如果一个有符号一个无符号，可以用mulhsu指令。在一条指令中完成把64位积写入两个 32位寄存器的操作会使硬件设计变得复杂，所以RV32M需要两条乘法指令才能得到一个完整的64位积。</p><p>对许多微处理器来说，整数除法是相对较慢的操作。如前述，除数为2的幂次的无符号除法可以用右移来代替。事实证明，通过乘以近似倒数再修正积的高32位的方法，可以优化除数为其它数的除法。例如，图 4.3显示了 3为除数的无符号除法的代码。</p><p><img src="https://xyc-1316422823.cos.ap-shanghai.myqcloud.com/RISC-V%E4%B8%AD%E6%96%87%E6%89%8B%E5%86%8C/4.3.png" alt="图4.3"></p><div class="note note-danger">            <p>lui t0, 0xaaaab 为什么t0&#x3D;0xaaaaaaab而不是0xaaaab000</p>          </div>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>RISC-V</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RISC-V手册 第二章 RV32I基础整数指令集</title>
    <link href="/2023/01/06/RISC-V%E7%AC%AC%E4%BA%8C%E7%AB%A0/"/>
    <url>/2023/01/06/RISC-V%E7%AC%AC%E4%BA%8C%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="1-2-模块化与增量型-ISA"><a href="#1-2-模块化与增量型-ISA" class="headerlink" title="1.2 模块化与增量型 ISA"></a>1.2 模块化与增量型 ISA</h2><p>​和几乎所有以往的 ISA不同，RISC-V是模块化的。它的核心是一个名为RV32I的基础 ISA，运行一个完整的软件栈。RV32I是固定的，永远不会改变。模块化来源于可选的标准扩展，根据应用程序的需要，硬件可以包含或不包含这些扩展。可以生成当前硬件条件下的最佳代码。惯例是把代表扩展的字母附加到指令集名称之后作为指示。例如，RV32IMFD将乘法（ RV32M），单精度浮点（RV32F）和双精度浮点（RV32D）的扩展添加到了基础指令集 RV32I）中。</p><h2 id="2-2-RV32I-指令格式"><a href="#2-2-RV32I-指令格式" class="headerlink" title="2.2 RV32I 指令格式"></a>2.2 RV32I 指令格式</h2><p><img src="https://xyc-1316422823.cos.ap-shanghai.myqcloud.com/RISC-V%E4%B8%AD%E6%96%87%E6%89%8B%E5%86%8C/RV32I%E6%8C%87%E4%BB%A4%E5%9B%BE%E7%A4%BA.png" alt="图2.1: RV32指令图示"></p><p>​用于寄存器-寄存器操作的R类型指令，用于短立即数和访存load操作的I型指令，用于访存store操作的S型指令，用于条件跳转操作的B类型指令，用于长立即数的U型指令和用于无条件跳转的J型指令。</p><p><img src="https://xyc-1316422823.cos.ap-shanghai.myqcloud.com/RISC-V%E4%B8%AD%E6%96%87%E6%89%8B%E5%86%8C/RISC%E6%8C%87%E4%BB%A4%E6%A0%BC%E5%BC%8F.png" alt="图2.2"></p><p><img src="https://xyc-1316422823.cos.ap-shanghai.myqcloud.com/RISC-V%E4%B8%AD%E6%96%87%E6%89%8B%E5%86%8C/20230131113244.png" alt="图2.3"></p><h2 id="2-3-RV32I-寄存器"><a href="#2-3-RV32I-寄存器" class="headerlink" title="2.3 RV32I 寄存器"></a>2.3 RV32I 寄存器</h2><p>​RV32I有31寄存器加上一个值恒为0的x0寄存器。</p><p><img src="https://xyc-1316422823.cos.ap-shanghai.myqcloud.com/RISC-V%E4%B8%AD%E6%96%87%E6%89%8B%E5%86%8C/RV32I%E5%AF%84%E5%AD%98%E5%99%A8.png" alt="图2.4"></p><h2 id="2-4-RV32I-整数计算"><a href="#2-4-RV32I-整数计算" class="headerlink" title="2.4 RV32I 整数计算"></a>2.4 RV32I 整数计算</h2><p>​简单的算术指令（add, sub）、逻辑指令（and, or, xor），以及图2.1中的移位指令（sll, srl, sra）和其他ISA差不多。他们从寄存器读取两个32位的值，并将32位结果写入目标寄存器。</p><p>​程序可以根据比较结果生成布尔值。为应对这种使用场景下，RV32I提供一个当小于时置位的指令（slt）。</p><p>​图2.1剩下的两条整数计算指令主要用于构造大的常量数值和链接。加载立即数到高位（lui）将20位常量加载到寄存器的高20位。接着便可以使用标准的立即指令来创建32位常量。</p><p><strong>有什么不同之处？</strong></p><ul><li>RISC-V中没有字节或半字宽度的整数计算操作。操作始终是以完整的寄存器宽度。</li><li>RV32I也不包含乘法和除法，它们包含在可选的RV32M扩展中。</li></ul><h2 id="2-5-RV32I-的Load-和-Store"><a href="#2-5-RV32I-的Load-和-Store" class="headerlink" title="2.5 RV32I 的Load 和 Store"></a>2.5 RV32I 的Load 和 Store</h2><p>​除了提供32位字（lw，sw）的加载和存储外，图2.1中说明，RV32I 支持加载有符号和无符号字节和半字（lb，lbu，lh，lhu）和存储字节和半字（sb，sh）。有符号字节和半字符号扩展为32位再写入目的寄存器。即使是自然数据类型更窄，低位宽数据也是被扩展后再处理，这使得后续的整数计算指令能正确处理所有的32位。在文本和无符号整数中常用的无符号字节和半字，在写入目标寄存器之前都被无符号扩展到32位。</p><h2 id="RV32I-条件分支"><a href="#RV32I-条件分支" class="headerlink" title="RV32I 条件分支"></a>RV32I 条件分支</h2><p>​相等（beq），不相等 （bne），大于等于（bge），或小于（blt）。最后两种比较有符号比较，RV32I也提供相应的无符号版本比较的：bgeu和bltu。<strong>分支指令的寻址方式是12位的立即数乘以2，符号扩展它，然后将得到值加到PC上作为分支的跳转地址。</strong><span class="label label-danger">这句话没理解</span></p><div class="note note-info">            <p><strong>补充说明：获取PC</strong></p><p>当前的PC可以通过将auipc的U立即数字段设置为0来获得。</p>          </div><h2 id="2-7-RV32I无条件跳转"><a href="#2-7-RV32I无条件跳转" class="headerlink" title="2.7 RV32I无条件跳转"></a>2.7 RV32I无条件跳转</h2><p>​图2.1中的跳转并链接指令（jal）具有双重功能。若将下一条指令PC + 4的地址保存到目标寄存器中，通常是返回地址寄存器ra（见图2.4），便可以用它来实现过程调用。如果<strong>使用零寄存器（x0）替换ra作为目标寄存器</strong>，则可以实现无条件跳转，因为x0不能更改。像分支一样，jal将其20位分支地址乘以2，进行符号扩展后再添加到PC上，便得到了跳转地址。</p><div class="note note-info">            <p><code>jal x1, X</code> means jump to X, and save the return address which is normally PC+4 to the x1.</p><p><code>jal x0 0(x1)</code>  use indirect address (<code>x1</code>) plus a constant of 12bits (0 in your example). set <code>x0</code> as return address register because you «don’t care».</p>          </div><h2 id="2-8-RV32I-杂项"><a href="#2-8-RV32I-杂项" class="headerlink" title="2.8 RV32I 杂项"></a>2.8 RV32I 杂项</h2><p>​图2.1中的控制状态寄存器指令 (csrrc、csrrs、csrrw、csrrci、csrrsi、csrrwi)，使我们可以轻松地访问一些程序性能计数器。对于这些64位计数器, 我们一次可以读取32位。这些计数器包括了系统时间, 时钟周期以及执行的指令数目。</p><p>​在RISC-V指令集中，<strong>ecall</strong>指令用于向运行时环境发出请求，例如系统调用。调试器使用<strong>ebreak</strong>指令将控制转移到调试环境。</p><p>​<strong>fence</strong>指令对外部可见的访存请求，如设备I &#x2F; O和内存访问等进行串行化。外部可见指对处理器的其他核心、线程，外部设备或协处理器可见。fence.i指令同步指令和数据流。在执行fence.i指令之前，对于同一个硬件线程，RISC-V不保证用存储指令写到内存指令区的数据可以被取指令取到。</p><h2 id="2-10-结束语"><a href="#2-10-结束语" class="headerlink" title="2.10 结束语"></a>2.10 结束语</h2><ul><li>32位字节可寻址的地址空间</li><li>所有指令均为32位长</li><li>31个寄存器，全部32位宽，寄存器0硬连线为零</li><li>所有操作都在寄存器之间（没有寄存器到内存的操作）</li><li>加载&#x2F;存储字加上有符号和无符号加载&#x2F;存储字节和半字</li><li>所有算术，逻辑和移位指令都有立即数版本的指令</li><li>立即数总是符号扩展</li><li>仅提供一种数据寻址模式（寄存器+立即数）和PC相对分支</li><li>无乘法或除法指令</li><li>一个指令，用于将大立即数加载到寄存器的高位，这样加载32位常量到寄存器只需要两条指令</li></ul><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="http://www.riscvbook.com/greencard-20181213.pdf">RISC-V Green Card</a></p><p><a href="http://www.riscvbook.com/chinese/RISC-V-Reader-Chinese-v2p1.pdf">RISC-V-Reader-Chinese-v2p1.pdf</a></p>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>RISC-V</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Markdown and theme Fluid syntax</title>
    <link href="/2023/01/05/Markdown%E8%AF%AD%E6%B3%95/"/>
    <url>/2023/01/05/Markdown%E8%AF%AD%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="Tags"><a href="#Tags" class="headerlink" title="Tags"></a>Tags</h2><p>Method 1:</p><div class="note note-success">            <p>Markdown</p>          </div><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs md">&#123;% note success %&#125;<br>success<br>&#123;% endnote %&#125;<br></code></pre></td></tr></table></figure><p>Method 2:</p><p class="note note-info">html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;note note-info&quot;</span>&gt;</span>info<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><p>Support various colors:</p><p class="note note-primary">primary</p><p class="note note-secondary">secondary</p><p class="note note-success">success</p><p class="note note-danger">danger</p><p class="note note-warning">warning</p><p class="note note-info">info</p><p class="note note-light">light</p><p><strong>inline tags</strong>:</p><span class="label label-danger">text</span> <span class="label label-warning">text</span><span class="label label-info">text</span> <span class="label label-success">text</span><h2 id="Blockquotes"><a href="#Blockquotes" class="headerlink" title="Blockquotes"></a>Blockquotes</h2><blockquote><p>This is a blockquote with two paragraphs. This is first paragraph.</p><p> This is second pragraph.Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.</p></blockquote><h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><ul><li>red</li><li>green</li><li>blue</li></ul><h2 id="Task-list"><a href="#Task-list" class="headerlink" title="Task list"></a>Task list</h2><p>Method 1：</p><ul><li><input disabled="" type="checkbox"> a task list item</li><li><input checked="" disabled="" type="checkbox"> completed</li></ul><p>Method 2：</p><div>            <input type="checkbox" disabled >a task list item          </div><div>            <input type="checkbox" disabled checked="checked">a task list item          </div>            <input type="checkbox" disabled >a task list item          <p><a href="https://hexo.fluid-dev.com/docs/guide/#tag-%E6%8F%92%E4%BB%B6">勾选框</a></p><h2 id="Code-block"><a href="#Code-block" class="headerlink" title="Code block"></a>Code block</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-keyword">require</span> <span class="hljs-string">&#x27;redcarpet&#x27;</span><br>markdown = <span class="hljs-title class_">Redcarpet</span>.new(<span class="hljs-string">&quot;Hello World!&quot;</span>)<br>puts markdown.to_html<br></code></pre></td></tr></table></figure><p>inline code:<br><code>int a = 123</code></p><h2 id="Math-block"><a href="#Math-block" class="headerlink" title="Math block"></a>Math block</h2><p class="note note-warning">需要在front-matter中指定math：true</p><p>$$<br>\mathbf{V}_1 \times \mathbf{V}_2 &#x3D;<br>\begin{bmatrix}<br>\mathbf{i} &amp; \mathbf{j} &amp; \mathbf{k} \<br>\frac{\partial X}{\partial u} &amp;  \frac{\partial Y}{\partial u} &amp; 0 \<br>\frac{\partial X}{\partial v} &amp;  \frac{\partial Y}{\partial v} &amp; 0 \<br>\end{bmatrix}<br>$$</p><p class="note note-danger">矩阵没法换行，有bug，以后换个LaTeX引擎</p><p>Inline math:<br>$\lim_{x \to \infty} \exp(-x) &#x3D; 0$</p><h2 id="Table"><a href="#Table" class="headerlink" title="Table"></a>Table</h2><table><thead><tr><th>First Header</th><th>Second Header</th></tr></thead><tbody><tr><td>Content Cell</td><td>Content Cell</td></tr><tr><td>Content Cell</td><td>Content Cell</td></tr></tbody></table><table><thead><tr><th align="left">Left-Aligned</th><th align="center">Center Aligned</th><th align="right">Right Aligned</th></tr></thead><tbody><tr><td align="left">col 3 is</td><td align="center">some wordy text</td><td align="right">$1600</td></tr><tr><td align="left">col 2 is</td><td align="center">centered</td><td align="right">$12</td></tr><tr><td align="left">zebra stripes</td><td align="center">are neat</td><td align="right">$1</td></tr></tbody></table><h2 id="Footnotes"><a href="#Footnotes" class="headerlink" title="Footnotes"></a>Footnotes</h2><p>这是一句话<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="这是对应的脚注">[1]</span></a></sup></p><h2 id="Horizontal-Rules"><a href="#Horizontal-Rules" class="headerlink" title="Horizontal Rules"></a>Horizontal Rules</h2><hr><h2 id="Mermaid"><a href="#Mermaid" class="headerlink" title="Mermaid"></a>Mermaid</h2><p class="note note-warning">需要在front-matter中指定mermaid：true</p><pre><code class=" mermaid">classDiagramClass01 &lt;|-- AveryLongClass : CoolClass03 *-- Class04Class05 o-- Class06Class07 .. Class08Class09 --&gt; C2 : Where am i?Class09 --* C3Class09 --|&gt; Class07Class07 : equals()Class07 : Object[] elementDataClass01 : size()Class01 : int chimpClass01 : int gorillaClass08 &lt;--&gt; C2: Cool label</code></pre><h2 id="Links"><a href="#Links" class="headerlink" title="Links"></a>Links</h2><p>This is <a href="http://www.baidu.com/" title="Baidu">Baidu</a> inline link.</p><h3 id="Internal-Links"><a href="#Internal-Links" class="headerlink" title="Internal Links"></a>Internal Links</h3><p><a href="#Tags">Internal link</a></p><h3 id="Reference-Links"><a href="#Reference-Links" class="headerlink" title="Reference Links"></a>Reference Links</h3><p>看起来和Links的区别就是可以在文章其他地方定义链接</p><p>This is <a href="http://www.baidu.com/" title="Optional Title Here">Baidu</a> reference-style link.</p><h2 id="URLs"><a href="#URLs" class="headerlink" title="URLs"></a>URLs</h2><p>直接放网址的方式：</p><p><a href="https://yc-xiang.github.io/">https://yc-xiang.github.io/</a></p><h2 id="Images"><a href="#Images" class="headerlink" title="Images"></a>Images</h2><div align="center"><img src="https://xyc-1316422823.cos.ap-shanghai.myqcloud.com/git1.png" width="50%"></div><p><strong>Method 1</strong>: html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://xyc-1316422823.cos.ap-shanghai.myqcloud.com/git1.png&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;50%&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>Method 2</strong>: Markdown</p><p>不能改格式大小<br><img src="/img/default.png" alt="图片标题"></p><p><strong>Method 3</strong>: Tags 插件</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="/img/default.png" alt="图片标题"></div><div class="group-image-wrap"><img src="/img/default.png" alt="图片标题"></div><div class="group-image-wrap"><img src="/img/default.png" alt="图片标题"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="/img/default.png" alt="图片标题"></div><div class="group-image-wrap"><img src="/img/default.png" alt="图片标题"></div></div></div><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><p><del>Mistaken text</del> <u>underline</u><br><strong>Bold</strong> <em>italic</em></p><!-- This is some comments --><h2 id="Emoji"><a href="#Emoji" class="headerlink" title="Emoji"></a>Emoji</h2><p>:smile:<br>:dog:</p><h2 id="html"><a href="#html" class="headerlink" title="html"></a>html</h2><!-- This is some comments --><p>注释：<code>&lt;!-- This is some comments --&gt;</code></p><p>空行：<code>&lt;br /&gt;</code></p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://hexo.fluid-dev.com/docs/guide/">Hexo Fluid 用户手册</a></p><br /><br /><br /><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>这是对应的脚注<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git 常用指令</title>
    <link href="/2023/01/04/2023-1-4-git/"/>
    <url>/2023/01/04/2023-1-4-git/</url>
    
    <content type="html"><![CDATA[<h1 id="GIT"><a href="#GIT" class="headerlink" title="GIT"></a>GIT</h1><h2 id="Git-push"><a href="#Git-push" class="headerlink" title="Git push"></a>Git push</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># git push [远程主机名][本地分支名]:[远程分支名]</span><br>$ git push origin HEAD:master<br><span class="hljs-comment"># HEAD是当前指向的分支,可以用git show HEAD 查看</span><br>$ git show HEAD<br>$ git branch -a<br><span class="hljs-comment"># 需要code view 时要加/refs/for</span><br>$ git push origin HEAD:refs/for/master<br><br><span class="hljs-comment"># 不加远程分支名</span><br>$ git push origin dev<br><span class="hljs-comment"># 相当于,如果远程分支不存在则会自动创建, 并创建联系</span><br>$ git push origin dev:dev<br>$ git branch --set-upstream-to=origin/dev<br><span class="hljs-comment"># 删除远程分支，直接推送空分支到远程分支</span><br>$ git push origin :dev<br></code></pre></td></tr></table></figure><h2 id="git-diff"><a href="#git-diff" class="headerlink" title="git diff"></a>git diff</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看unstaged的改动(还没git add)</span><br>$ git diff<br><span class="hljs-comment"># 查看staged的改动(git add过的)</span><br>$ git diff --staged<br><span class="hljs-comment"># 显示出branch1和branch2中差异的部分</span><br>$ git diff branch1 branch2 --<span class="hljs-built_in">stat</span><br><span class="hljs-comment"># 显示指定文件的详细差异</span><br>$ git diff branch1 branch2 具体文件路径<br><span class="hljs-comment"># 显示出所有有差异的文件的详细差异</span><br>$ git diff branch1 branch2<br><span class="hljs-comment"># 显示本地master分支与远程master分支的区别</span><br>$ git diff master origin/master<br><span class="hljs-comment"># 比较两个commit</span><br>git diff commit id1 commit id2<br></code></pre></td></tr></table></figure><h2 id="git-log"><a href="#git-log" class="headerlink" title="git log"></a>git log</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看前两个commit的修改</span><br>$ git <span class="hljs-built_in">log</span> -p -2<br><span class="hljs-comment"># 查看改动了哪些文件</span><br>$ git <span class="hljs-built_in">log</span> --<span class="hljs-built_in">stat</span><br><span class="hljs-comment"># 每个commit一行展示</span><br>$ git <span class="hljs-built_in">log</span> --pretty=oneline<br><span class="hljs-comment"># 展示合并历史</span><br>$ git <span class="hljs-built_in">log</span> --graph<br><span class="hljs-comment"># 从一定时间开始的commit</span><br>$ git <span class="hljs-built_in">log</span> --since=2.weeks<br>$ git <span class="hljs-built_in">log</span> --since=2008-01-15<br>$ git <span class="hljs-built_in">log</span> --since=2 years 1 day 3 minutes ago<br><span class="hljs-comment"># 查看哪些commit修改了function_name</span><br>$ git <span class="hljs-built_in">log</span> -S function_name<br><span class="hljs-comment"># 查看某个文件的commit</span><br>$ git <span class="hljs-built_in">log</span> -- path/to/file<br></code></pre></td></tr></table></figure><p>You can also filter the list to commits that match some search criteria. The <code>--author</code> option allows<br>you to filter on a specific author, and the <code>--grep</code> option lets you search for keywords in the commit<br>messages.<br><img src="https://xyc-1316422823.cos.ap-shanghai.myqcloud.com/RISC-V%E4%B8%AD%E6%96%87%E6%89%8B%E5%86%8C/20230116143526.png"></p><h2 id="git-rebase-git-merge"><a href="#git-rebase-git-merge" class="headerlink" title="git rebase, git merge"></a>git rebase, git merge</h2><p>git merge：在dev分支git merge main，&#x2F;&#x2F; 将main最新的commit拉到dev，有合并记录</p><p>git rebase：在dev分支git rebase main &#x2F;&#x2F;修改dev分支，将main最新的commit拉到dev，将dev最新的commit 接到main后面</p><p>e.g 在本地一个分支上有了C5，C6两个自己的commit，但此时远程master分支上别人又合并了两个C3,C4分支。如果用git pull（git fetch + git merge）会有一个新的merge commit。此时需要git rebase 将c5,c6接到最新的master代码(c4)上。</p><p><img src="https://xyc-1316422823.cos.ap-shanghai.myqcloud.com/git1.png"></p><p><img src="https://xyc-1316422823.cos.ap-shanghai.myqcloud.com/git2.png"></p><h2 id="git-revert"><a href="#git-revert" class="headerlink" title="git revert"></a>git revert</h2><p>git branch -f dev HEAD^  &#x2F;&#x2F;让dev分支指向HEAD^</p><p>本地撤销当前提交：git reset HEAD^</p><p>远程撤销当前提交：git revert HEAD</p><p>git remote show origin：查看远程信息</p><p>git branch –set-upstream-to&#x3D;origin&#x2F;develop（远程分支） develop：关联远程分支</p><p>那么如何查看已经配置分支关联信息呢，通过下述三条命令均可：</p><ol><li>git branch -vv</li><li>git remote show origin</li><li>cat .git&#x2F;config</li></ol><p>在一个分支上修改，突然要切到另一个分支：</p><ol><li>把现在的修改 git commit</li><li>git stash 暂存起来，注意这个stash 也会带到另一个分支。注意git stash pop和apply的区别，apply不会将栈弹出</li></ol><h2 id="git-stash"><a href="#git-stash" class="headerlink" title="git stash"></a>git stash</h2><p>git stash save “add style to our site” 添加stash信息</p><p>git stash clear :注意这是清空你所有的内容</p><p>git stash drop stash@{0} 这是删除第一个队列</p><p>git stash apply 不会删除内容</p><p>git stash pop 删除内容</p><p>git stash 不能stash untracked的文件，需要先git add，或者git stash -u</p><p>查看某个stash的具体内容：git stash show -p stash@{1}</p><h2 id="git-放弃修改-放弃增加文件操作"><a href="#git-放弃修改-放弃增加文件操作" class="headerlink" title="git 放弃修改, 放弃增加文件操作"></a>git 放弃修改, 放弃增加文件操作</h2><p>1.本地修改了一些文件 (并没有使用 git add 到暂存区)，想放弃修改:</p><ul><li>单个文件: <code>git checkout -- filename</code></li><li>所有文件&#x2F;文件夹: <code>git checkout .</code></li></ul><p>2.本地新增了一些文件 (并没有 git add 到暂存区)，想放弃修改:</p><ul><li>单个文件&#x2F;文件夹: <code>rm  -rf filename</code></li><li>所有文件: <code>git clean -nxfd</code></li></ul><blockquote><p>-f 删除untracked files <br/><br>-d 连untracked 的目录一起删掉 <br/><br>-x 连 gitignore 的untrack 文件&#x2F;目录也一起删掉（慎用,一般这个是用来删掉编译出来的.o之类的文件用的）<br/><br>-n 先看看会删掉哪些文件，防止重要文件被误删</p></blockquote><p>3.本地修改&#x2F;新增了一些文件，已经 git add 到暂存区，想放弃修改:</p><ul><li>单个文件&#x2F;文件夹: <code>git reset HEAD filename</code></li><li>所有文件&#x2F;文件夹: <code>git reset HEAD .</code></li></ul><p>4.本地通过 git add 和 git commit 后，想要撤销此次 commit：</p><ul><li><p>撤销 commit, 同时保留该 commit 修改：<code>git reset commit_id</code> (撤销之后，你所做的已经 commit 的修改还在工作区)</p></li><li><p>撤销 commit, 同时本地删除该 commit 修改：<code>git reset --hard commit_id</code> (撤销之后，你所做的已经 commit 的修改将会清除，仍在工作区&#x2F;暂存区的代码也将会清除)</p></li></ul><blockquote><p>这里的commit id可以通过git log查看选取前6位，commit_id是想要回到的节点</p></blockquote><h2 id="git-rebase"><a href="#git-rebase" class="headerlink" title="git rebase"></a>git rebase</h2><blockquote><p>不要通过rebase对任何已经提交到公共仓库中的commit进行修改（你自己一个人玩的分支除外）</p></blockquote><h3 id="合并多个commit为一个完整commit"><a href="#合并多个commit为一个完整commit" class="headerlink" title="合并多个commit为一个完整commit"></a>合并多个commit为一个完整commit</h3><p><a href="https://www.jianshu.com/p/4a8f4af4e803">https://www.jianshu.com/p/4a8f4af4e803</a></p><p><code>git rebase -i HEAD~3</code> 修改HEAD往后三个分支（包括HEAD)</p><p>或者<code>git rebase -i 某个commit</code> 修改某个commit前的所有提交</p><p>然后<code>git push -f</code>可以修改远程的commit记录</p><h3 id="将某一段commit粘贴到另一个分支上"><a href="#将某一段commit粘贴到另一个分支上" class="headerlink" title="将某一段commit粘贴到另一个分支上"></a>将某一段commit粘贴到另一个分支上</h3><h2 id="生成-x2F-打patch"><a href="#生成-x2F-打patch" class="headerlink" title="生成&#x2F;打patch"></a>生成&#x2F;打patch</h2><p>生成patch：git diff &gt; patch.diff</p><p>检查patch：git apply –stat patch.diff</p><p>查看能否打入：git apply –check patch.diff</p><p><a href="https://adtxl.com/index.php/archives/471.html">https://adtxl.com/index.php/archives/471.html</a></p><p><a href="https://blog.csdn.net/u013318019/article/details/114860407">https://blog.csdn.net/u013318019/article/details/114860407</a></p><h2 id="git-tag"><a href="#git-tag" class="headerlink" title="git tag"></a>git tag</h2><p><a href="https://www.runoob.com/git/git-tag.html">https://www.runoob.com/git/git-tag.html</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看所有标签</span><br>$ git tag<br><br><span class="hljs-comment"># 创建</span><br>$ git tag -a v1.0<br><br><span class="hljs-comment"># 删除</span><br>$ git tag -d v1.0<br><br><span class="hljs-comment">#查看</span><br>$ git show v1.0<br><br><span class="hljs-comment"># 切换</span><br>git checkout v1.0<br></code></pre></td></tr></table></figure><p>tag 需要单独上传<code>git push origin &lt;tagname&gt;</code> 和删除&#96;&#96;git push origin –delete <tagname>&#96;</p><h2 id="创建分支并与远程某分支关联："><a href="#创建分支并与远程某分支关联：" class="headerlink" title="创建分支并与远程某分支关联："></a>创建分支并与远程某分支关联：</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 可以先更新远程分支信息</span><br>git remote update origin --prune<br><br><span class="hljs-comment"># git checkout -b 本地新分支 远程分支。远程分支可以git branch -a查看</span><br>git checkout -b <span class="hljs-built_in">test</span> origin/test<br><br><span class="hljs-comment"># 用下面的操作两个分支会对不上，无法git push，因为test分支可能是从master分支新建过来的，git log都不对应，需要一个干净的分支</span><br>git chekcout -b <span class="hljs-built_in">test</span><br>git branch --set-upstream-to=origin/develop<br></code></pre></td></tr></table></figure><h1 id="Pro-Git"><a href="#Pro-Git" class="headerlink" title="Pro Git"></a>Pro Git</h1><h2 id="First-Time-Git-Setup"><a href="#First-Time-Git-Setup" class="headerlink" title="First-Time Git Setup"></a>First-Time Git Setup</h2><ol><li><code>[path]/etc/gitconfig</code> system全局配置。pass the option <code>--system</code> to <code>git config</code>。</li><li><code>~/.gitconfig</code> or <code>~/.config/git/config</code> user全局配置。<code>--global</code>。</li><li><code>config</code> file in the Git directory (that is, <code>.git/config</code>) 某个库的本地配置。<code>--local</code>。</li></ol><p>You can view all of your settings and where they are coming from using:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --list --show-origin<br></code></pre></td></tr></table></figure><h3 id="Your-Identity"><a href="#Your-Identity" class="headerlink" title="Your Identity"></a>Your Identity</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git config --global user.name <span class="hljs-string">&quot;John Doe&quot;</span><br>$ git config --global user.email johndoe@example.com<br></code></pre></td></tr></table></figure><h3 id="Your-Editor"><a href="#Your-Editor" class="headerlink" title="Your Editor"></a>Your Editor</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global core.editor vim<br></code></pre></td></tr></table></figure><h1 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h1><p>在repository中不小心上传了大文件或者隐私数据：<br><a href="https://help.github.com/articles/removing-sensitive-data-from-a-repository/">https://help.github.com/articles/removing-sensitive-data-from-a-repository/</a></p><p><strong>git alias</strong>: <a href="https://git-scm.com/docs/git-config#Documentation/git-config.txt-alias">https://git-scm.com/docs/git-config#Documentation/git-config.txt-alias</a></p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="https://learngitbranching.js.org/">An online game to learn Git</a><br><a href="https://git-scm.com/book/en/v2">Pro Git</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>程序员的自我修养学习笔记</title>
    <link href="/2022/01/27/2022-1-27-%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/"/>
    <url>/2022/01/27/2022-1-27-%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/</url>
    
    <content type="html"><![CDATA[<h2 id="第三章-目标文件里有什么"><a href="#第三章-目标文件里有什么" class="headerlink" title="第三章 目标文件里有什么"></a>第三章 目标文件里有什么</h2><h3 id="3-1-目标文件的格式"><a href="#3-1-目标文件的格式" class="headerlink" title="3.1 目标文件的格式"></a>3.1 目标文件的格式</h3><ul><li>可重定位文件 .o, .a</li><li>可执行文件</li><li>共享目标文件 .so</li><li>核心转储文件</li></ul><p><code>file</code> 命令可以查看文件格式</p><h3 id="3-3-挖掘SimpleSection-o"><a href="#3-3-挖掘SimpleSection-o" class="headerlink" title="3.3 挖掘SimpleSection.o"></a>3.3 挖掘SimpleSection.o</h3><p><code>gcc -c SimpleSection.c</code> -c 表示只编译不链接</p><p><code>objdump -h SimpleSection.o</code> 可以查看目标文件的结构 -h:打印段基本信息 -s:把所有段内容以16进制打印出来 -d:将所有包含指令的段反汇编 -x:详细信息</p><p><code>size SimpleSection.o</code> 可以查看ELF文件段的长度</p>]]></content>
    
    
    
    <tags>
      
      <tag>程序员的自我修养</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSAPP-第七章 链接</title>
    <link href="/2022/01/20/2022-1-20-csapp-ch7/"/>
    <url>/2022/01/20/2022-1-20-csapp-ch7/</url>
    
    <content type="html"><![CDATA[<h2 id="7-2-静态链接"><a href="#7-2-静态链接" class="headerlink" title="7.2 静态链接"></a>7.2 静态链接</h2><ul><li>符号解析</li><li>重定位</li></ul><h2 id="7-3-目标文件"><a href="#7-3-目标文件" class="headerlink" title="7.3 目标文件"></a>7.3 目标文件</h2><ul><li>可重定位目标文件</li><li>可执行目标文件</li><li>共享目标文件</li></ul><h2 id="7-4-可重定位目标文件"><a href="#7-4-可重定位目标文件" class="headerlink" title="7.4 可重定位目标文件"></a>7.4 可重定位目标文件</h2><ul><li><code>.test</code></li><li><code>.rodata</code></li><li><code>.data</code> 已初始化的全局和静态变量 </li><li><code>.bss</code>  未初始化和初始化为0的全局和静态变量</li><li><code>symtab</code> 符号表</li><li><code>rel.text</code></li><li><code>rel.data</code></li><li><code>debug</code></li><li><code>line</code></li><li><code>strlab</code></li></ul><h2 id="7-5-符号和符号表"><a href="#7-5-符号和符号表" class="headerlink" title="7.5 符号和符号表"></a>7.5 符号和符号表</h2><ul><li>全局符号 非静态C函数、全局变量</li><li>外部符号 由其他模块定义，并被本模块引用的<strong>全局符号</strong></li><li>局部符号 static函数、static变量</li></ul><p>可重定位目标文件中才有的伪节：</p><ul><li><code>ABS</code>: 不该被重定位的符号</li><li><code>UNDEF</code>: 未定义的符号，即在本目标模块引用，却在其他地方定义的符号。</li><li><code>COMMON</code>: 还未被分配位置的未初始化数据</li></ul><p>COMMONN和.bss区别：</p><ul><li><code>COMMON</code>: 未初始化的全局变量</li><li><code>.bss</code>: 未初始化的静态变量，以及初始化未0的全局或静态变量</li></ul><h2 id="7-6-符号解析"><a href="#7-6-符号解析" class="headerlink" title="7.6 符号解析"></a>7.6 符号解析</h2><h3 id="7-6-1-linker如何解析多重定义的全局符号"><a href="#7-6-1-linker如何解析多重定义的全局符号" class="headerlink" title="7.6.1 linker如何解析多重定义的全局符号"></a>7.6.1 linker如何解析多重定义的全局符号</h3><ul><li>规则1：不允许多个同名的强符号</li><li>规则2：如果有一个强符号和多个弱符号同名，选择强符号</li><li>规则3：如果有多个同名的弱符号，随机选一个</li></ul><p>在p2()中对x写，<strong>可能</strong>会overwrite y，因为两个弱符号随机选一个，如果选择的是p2中的x则没事，如果选择的是p1的x，情况同下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// p1.c</span><br><span class="hljs-type">int</span> x;<br><span class="hljs-type">int</span> y;<br>p1()&#123;&#125;;<br><br><span class="hljs-comment">// p2.c</span><br><span class="hljs-type">double</span> x;<br>p2()&#123;&#125;;<br></code></pre></td></tr></table></figure><p>在p2()中对x写，<strong>一定</strong>会overwrite y，因为p1中x是强符号，但在p2中写x，x的数据类型仍然是double</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// p1.c</span><br><span class="hljs-type">int</span> x=<span class="hljs-number">7</span>;<br><span class="hljs-type">int</span> y=<span class="hljs-number">5</span>;<br>p1()&#123;&#125;;<br><br><span class="hljs-comment">// p2.c</span><br><span class="hljs-type">double</span> x;<br>p2()&#123;&#125;;<br></code></pre></td></tr></table></figure><p>通过 GCC <code>-fno-common</code> 多重定义的全局符号触发错误，<code>-Werror</code>把警告都变成错误来预防。    </p><h3 id="7-6-3-使用静态库解析引用"><a href="#7-6-3-使用静态库解析引用" class="headerlink" title="7.6.3 使用静态库解析引用"></a>7.6.3 使用静态库解析引用</h3><p>最基础实现的库要放在最后</p><p>foo.c 调用libx.a和libz.a 而这两个库又调用liby.a: <code>gcc foo.c libx.a libz.a liby.a</code> </p><p>foo.c调用libx.a libx.a调用liby.a liby.a也调用libx.a: <code>gcc foo.c libx.a liby.a libx.a</code></p><h2 id="7-7-重定位"><a href="#7-7-重定位" class="headerlink" title="7.7 重定位"></a>7.7 重定位</h2><ul><li>重定位节和符号定义</li><li>重定位节中的符号引用</li></ul><h3 id="7-7-1-重定位条目"><a href="#7-7-1-重定位条目" class="headerlink" title="7.7.1 重定位条目"></a>7.7.1 重定位条目</h3><p><code>R_X86_64_PC32</code>：32位PC相对地址的引用</p><p><code>R_X86_64_32</code>：32位绝对地址的引用</p>]]></content>
    
    
    
    <tags>
      
      <tag>CSAPP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSAPP-第三章 程序的机器级表示</title>
    <link href="/2022/01/10/2022-1-10-csapp-ch3/"/>
    <url>/2022/01/10/2022-1-10-csapp-ch3/</url>
    
    <content type="html"><![CDATA[<h2 id="第三章-程序的机器级表示"><a href="#第三章-程序的机器级表示" class="headerlink" title="第三章 程序的机器级表示"></a>第三章 程序的机器级表示</h2><h2 id="3-2-程序编码"><a href="#3-2-程序编码" class="headerlink" title="3.2 程序编码"></a>3.2 程序编码</h2><p><code>linux&gt; gcc -Og -o p p1.c p2.c</code> 编译选项-Og告诉编译器使用会生成符合原始C代码整体结构的机器代码的优化等级。</p><p>实际中，从得到的程序的性能考虑，较高级别的优化（例如，以选项-O1或-O2指定）被认为是较好的选择。</p><h3 id="3-2-1-机器级代码"><a href="#3-2-1-机器级代码" class="headerlink" title="3.2.1 机器级代码"></a>3.2.1 机器级代码</h3><p><code>gcc -S mstore.c</code> 编译生成汇编代码<code>mstore.s</code></p><p><code>gcc -c mstore.c</code> 编译并汇编生成机器指令<code>mstore.o</code></p><p><strong>展示程序的字节表示</strong></p><p><code>(gdb) x/14xb multstore</code> gdb(x)显示从函数multstore地址开始的14个十六进制(x)的字节(b)</p><p><strong>反汇编器</strong></p><p><code>objdump -d mstore.o</code></p><h2 id="3-3-3-4-数据格式-x2F-访问信息"><a href="#3-3-3-4-数据格式-x2F-访问信息" class="headerlink" title="3.3-3.4 数据格式&#x2F;访问信息"></a>3.3-3.4 数据格式&#x2F;访问信息</h2><p>书上图3-1 C语言数据类型在x86-64中的大小</p><p>图3-2 整数寄存器</p><blockquote><p>生成1字节和2字节数字的指令会保持剩下的字节不变；</p><p>生成4字节数字的指令会把高位4字节置为0（<code>movl $-1,%eax</code>）。P124有例子</p><p>即movl指令以寄存器作为目的时，会把该寄存器的高位4字节设置为0</p></blockquote><h3 id="3-4-1-操作数指示符"><a href="#3-4-1-操作数指示符" class="headerlink" title="3.4.1 操作数指示符"></a>3.4.1 操作数指示符</h3><ul><li>立即数 <code>$-577</code> <code>$0x1F</code></li><li>寄存器 <code>%rax</code></li><li>内存引用 <code>(%rax)</code></li></ul><h3 id="3-4-2-数据传送指令"><a href="#3-4-2-数据传送指令" class="headerlink" title="3.4.2 数据传送指令"></a>3.4.2 数据传送指令</h3><p><strong>mov</strong></p><ul><li><code>movb</code> 传送字节</li><li><code>movw</code> 传送字</li><li><code>movl</code> 传送双字</li><li><code>movq</code> 传送四字</li><li><code>movabsq</code> 传送绝对的四字</li></ul><blockquote><p>常规的<code>movq</code>只能以32位补码数字的立即数作为源操作数，然后把这个值符号扩展得到64位的值</p><p><code>movabsq</code>可以以任意64位立即数作为源操作数，并且只能以寄存器作为目的</p></blockquote><p><strong>movz</strong></p><p><code>movzbw/movzbl/movzwl/movzbq/movzwq</code></p><p>零扩展</p><p><strong>movs</strong></p><p><code>movsbw/movsbl/movswl/movsbq/movswq/movslq</code></p><p><code>cltq</code>: 把<code>%eax</code>符号扩展到<code>%rax</code></p><p>符号扩展</p><h3 id="3-4-4-压入和弹出栈数据"><a href="#3-4-4-压入和弹出栈数据" class="headerlink" title="3.4.4 压入和弹出栈数据"></a>3.4.4 压入和弹出栈数据</h3><p><code>pushq</code> 和 <code>popq</code></p><p><code>pushq %rbp</code>等价于</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs fff">subq $8, %rsp 栈指针减8<br>movq %rbp, (%rsp) 将值写到新的栈顶地址<br></code></pre></td></tr></table></figure><p><code>popq %rax</code> 等价于</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs fff">movq (%rsp), %rax 从栈顶读出数据<br>addq $8, %rsp 栈指针加8<br></code></pre></td></tr></table></figure><h2 id="3-5-算数和逻辑操作"><a href="#3-5-算数和逻辑操作" class="headerlink" title="3.5 算数和逻辑操作"></a>3.5 算数和逻辑操作</h2><p>加载有效地址</p><ul><li><code>leaq</code></li></ul><p>一元操作</p><ul><li><code>inc</code> +1</li><li><code>dec</code> -1</li><li><code>neg</code> 取负-</li><li><code>not</code> 取补~</li></ul><p>二元操作</p><ul><li><code>add</code> +</li><li><code>sub</code> -</li><li><code>imul</code> *</li><li><code>xor</code> 异或</li><li><code>or</code> 或</li><li><code>and</code> 与</li></ul><p>移位</p><ul><li><code>sal</code> 左移</li><li><code>shl</code> 左移同sal</li><li><code>sar</code> 算术右移</li><li><code>shr</code> 逻辑右移</li></ul><h3 id="3-5-1-加载有效地址"><a href="#3-5-1-加载有效地址" class="headerlink" title="3.5.1 加载有效地址"></a>3.5.1 加载有效地址</h3><p><code>leaq</code> </p><p>两种作用：</p><ol><li>从内存读数据到寄存器 <code>leaq S, D</code> means <code>D &lt;- &amp;S</code></li><li>描述普通的算术操作（常用）<code>leaq 7(%rdx, %rdx, 4), %rax</code> means <code>%rax=5x+7</code> x是rdx的值</li></ol><h3 id="3-5-2-一元和二元操作"><a href="#3-5-2-一元和二元操作" class="headerlink" title="3.5.2 一元和二元操作"></a>3.5.2 一元和二元操作</h3><h3 id="3-5-3-移位操作"><a href="#3-5-3-移位操作" class="headerlink" title="3.5.3 移位操作"></a>3.5.3 移位操作</h3><h3 id="3-5-4-讨论"><a href="#3-5-4-讨论" class="headerlink" title="3.5.4 讨论"></a>3.5.4 讨论</h3><p><code>xorq %rdx, %rdx</code> 对rdx清零操作，相当于<code>x = x ^ x</code>，比<code>movl $0, %rdx</code>指令更节省字节。</p><h3 id="3-5-5-特殊的算术操作"><a href="#3-5-5-特殊的算术操作" class="headerlink" title="3.5.5 特殊的算术操作"></a>3.5.5 特殊的算术操作</h3><h2 id="3-6-控制"><a href="#3-6-控制" class="headerlink" title="3.6 控制"></a>3.6 控制</h2><h3 id="3-6-1-条件码"><a href="#3-6-1-条件码" class="headerlink" title="3.6.1 条件码"></a>3.6.1 条件码</h3><ul><li><code>CF</code> 进位标志</li><li><code>ZF</code> 零标志</li><li><code>SF</code> 符号标志</li><li><code>OF</code> 溢出标志</li></ul><p><code>leaq</code>不改变任何条件码</p><p><code>cmp</code>和<code>test</code>指令</p><h3 id="3-6-2-访问条件码"><a href="#3-6-2-访问条件码" class="headerlink" title="3.6.2 访问条件码"></a>3.6.2 访问条件码</h3><p>条件码通常不会直接读取，常用的方法有三种：</p><ol><li>根据条件码的组合，将一个字节设置为0或1，<code>sete/setne/sets/setns/setg/setl/seta/setb...</code></li><li>条件跳转到程序某个其他部分 <code>je/js/jg/jl/ja/jb...</code></li><li>可以有条件地传送数据 <code>cmove/cmovs/cmovg/cmovl/cmova/cmovb</code></li></ol><h3 id="3-6-3-跳转指令"><a href="#3-6-3-跳转指令" class="headerlink" title="3.6.3 跳转指令"></a>3.6.3 跳转指令</h3><ul><li>无条件跳转：<code>jmp</code> 直接跳转 <code>jmp + LABEL</code> 间接跳转 <code>jmp + *Operand</code></li><li>有条件跳转：<code>je/js/jg/jl/ja/jb...</code></li></ul><h3 id="3-6-4-跳转指令的编码"><a href="#3-6-4-跳转指令的编码" class="headerlink" title="3.6.4 跳转指令的编码"></a>3.6.4 跳转指令的编码</h3><p>将目标指令的地址与紧跟在跳转指令后面的那条指令的地址之间的差作为编码</p><h3 id="3-6-5-条件控制实现条件分支"><a href="#3-6-5-条件控制实现条件分支" class="headerlink" title="3.6.5 条件控制实现条件分支"></a>3.6.5 条件控制实现条件分支</h3><h3 id="3-6-6-条件传送实现条件分支"><a href="#3-6-6-条件传送实现条件分支" class="headerlink" title="3.6.6 条件传送实现条件分支"></a>3.6.6 条件传送实现条件分支</h3><h3 id="3-6-7-循环"><a href="#3-6-7-循环" class="headerlink" title="3.6.7 循环"></a>3.6.7 循环</h3><ul><li>do while</li><li>while<ul><li>jump to middle</li><li>guarded-do (-O1策略)</li></ul></li><li>for</li></ul><h3 id="3-6-8-switch语句"><a href="#3-6-8-switch语句" class="headerlink" title="3.6.8 switch语句"></a>3.6.8 switch语句</h3><p>跳转表</p><h2 id="3-7-过程"><a href="#3-7-过程" class="headerlink" title="3.7 过程"></a>3.7 过程</h2>]]></content>
    
    
    
    <tags>
      
      <tag>CSAPP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>U-boot启动流程分析</title>
    <link href="/2022/01/06/2022-1-6-U-boot%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/"/>
    <url>/2022/01/06/2022-1-6-U-boot%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h2 id="uboot三段式启动流程"><a href="#uboot三段式启动流程" class="headerlink" title="uboot三段式启动流程"></a>uboot三段式启动流程</h2><h3 id="Stage-1-Flash"><a href="#Stage-1-Flash" class="headerlink" title="Stage 1(Flash)"></a>Stage 1(Flash)</h3><h3 id="Stage-2-SRAM"><a href="#Stage-2-SRAM" class="headerlink" title="Stage 2(SRAM)"></a>Stage 2(SRAM)</h3><h3 id="Stage-3-SDRAM"><a href="#Stage-3-SDRAM" class="headerlink" title="Stage 3(SDRAM)"></a>Stage 3(SDRAM)</h3><h2 id="armv7架构uboot"><a href="#armv7架构uboot" class="headerlink" title="armv7架构uboot"></a>armv7架构uboot</h2><ul><li><p>arch级的初始化</p><ul><li>关闭中断，设置svc模式</li><li>禁用MMU、TLB</li><li>关键寄存器的设置，包括时钟、看门狗的寄存器</li></ul></li><li><p>板级的初始化</p><ul><li>堆栈环境的设置</li><li>代码重定向之前的板级初始化，包括串口、定时器、环境变量、I2C\SPI等等的初始化</li><li>进行代码重定向</li><li>代码重定向之后的板级初始化，包括板级代码中定义的初始化操作、emmc、nand flash、网络、中断等等的初始化</li><li>进入命令行状态，等待终端输入命令以及对命令进行处理</li></ul></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c">  .globl_start<br>  .globlsave_boot_params_ret<br>  .type   save_boot_params_ret,%function<br><br>_start:<br>  <span class="hljs-comment">/* Allow the board to save important registers */</span><br>  bsave_boot_params<br>save_boot_params_ret:<br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">   * disable interrupts (FIQ and IRQ), also set the cpu to SVC32 mode,</span><br><span class="hljs-comment">   * except if in HYP mode already</span><br><span class="hljs-comment">   */</span><br>  mrsr0, cpsr            <span class="hljs-comment">// 将程序状态寄存器cpsr的内容传送到r0中</span><br>  andr1, r0, #<span class="hljs-number">0x1f</span>       <span class="hljs-comment">// 读出r0寄存器[0:4]位的值保存到r1寄存器</span><br>  teqr1, #<span class="hljs-number">0x1a</span>           <span class="hljs-comment">// 判断r1寄存器与0x1a是否相等，是否处于HYP模式</span><br>  bicne r0, r0, #<span class="hljs-number">0x1f</span>     <span class="hljs-comment">// 不等则清除r0[0:4]位</span><br>  orrne r0, r0, #<span class="hljs-number">0x13</span>     <span class="hljs-comment">// 设置成SVC模式</span><br>  orrr0, r0, #<span class="hljs-number">0xc0</span>       <span class="hljs-comment">// 禁止快中断和外部中断</span><br>  msrcpsr,r0             <span class="hljs-comment">// 将r0传入cpsr</span><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Setup vector:</span><br><span class="hljs-comment"> * (OMAP4 spl TEXT_BASE is not 32 byte aligned.</span><br><span class="hljs-comment"> * Continue to use ROM code vector only in OMAP4 spl)</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">/* the mask ROM code should have PLL and others stable */</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> CONFIG_SKIP_LOWLEVEL_INIT</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> CONFIG_CPU_V7A</span><br>  blcpu_init_cp15  <span class="hljs-comment">// 调用cpu_init_cp15，初始化协处理器CP15,从而禁用MMU和TLB。</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>  ldrr0, =(CONFIG_SYS_FLASH_BASE + CONFIG_RAMINIT_OFFSET)<br>  ldrr1, =(CONFIG_LOAD_BASE)<br>  ldrr2, =(CONFIG_SYS_FLASH_BASE + CONFIG_RAMINIT_OFFSET \<br>      + CONFIG_RAMINIT_SIZE)<br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">   * r0 = source address</span><br><span class="hljs-comment">   * r1 = target address</span><br><span class="hljs-comment">   * r2 = source end address</span><br><span class="hljs-comment">   */</span><br><span class="hljs-number">1</span>:<br>  ldrr3, [r0], #<span class="hljs-number">4</span>  <span class="hljs-comment">// 将r0地址的数据写入r3, 并将新地址r0+4写入r0</span><br>  strr3, [r1], #<span class="hljs-number">4</span>  <span class="hljs-comment">// 将r3的数据写入以r1为地址的存储器，并将新地址r1+4写入r1</span><br>  cmpr0, r2        <span class="hljs-comment">// 比较r0，r2的值，判断source addr == source end addr</span><br>  bne<span class="hljs-number">1b</span>   <span class="hljs-comment">// 不等则跳回1</span><br><br>  ldr pc,=(CONFIG_LOAD_BASE) <span class="hljs-comment">// 跳转到CONFIG_LOAD_BASE地址执行指令</span><br><br>ENTRY(save_boot_params) <span class="hljs-comment">// ENTRY()实际上是一个global symbol的宏</span><br>  bsave_boot_params_ret@ back to my caller<br>ENDPROC(save_boot_params)<br>  .weaksave_boot_params<br><br>ENTRY(cpu_init_cp15)<br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">   * Invalidate L1 I/D</span><br><span class="hljs-comment">     * 这里只需要知道是对CP15处理器的部分寄存器清零即可。</span><br><span class="hljs-comment">     * 将协处理器的c7\c8清零等等，各个寄存器的含义请参考《ARM的CP15协处理器的寄存器》</span><br><span class="hljs-comment">   */</span><br>  movr0, #<span class="hljs-number">0</span><span class="hljs-comment">// set up for MCR</span><br>  mcrp15, <span class="hljs-number">0</span>, r0, c8, c7, <span class="hljs-number">0</span><span class="hljs-comment">// invalidate TLBs</span><br>  mcrp15, <span class="hljs-number">0</span>, r0, c7, c5, <span class="hljs-number">0</span><span class="hljs-comment">// invalidate icache</span><br>  mcrp15, <span class="hljs-number">0</span>, r0, c7, c5, <span class="hljs-number">6</span><span class="hljs-comment">// invalidate BP array</span><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> __LINUX_ARM_ARCH__ &gt;= 7</span><br>  dsb sy<br>  isb sy<br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>  mcr     p15, <span class="hljs-number">0</span>, r0, c7, c10, <span class="hljs-number">4</span>@ DSB<br>  mcr     p15, <span class="hljs-number">0</span>, r0, c7, c5, <span class="hljs-number">4</span>@ ISB<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">   * disable MMU stuff and caches</span><br><span class="hljs-comment">   */</span><br>  mrcp15, <span class="hljs-number">0</span>, r0, c1, c0, <span class="hljs-number">0</span><br>  bicr0, r0, #<span class="hljs-number">0x00002000</span>@ clear bits <span class="hljs-number">13</span> (--V-)<br>  bicr0, r0, #<span class="hljs-number">0x00000007</span>@ clear bits <span class="hljs-number">2</span>:<span class="hljs-number">0</span> (-CAM)<br>  orrr0, r0, #<span class="hljs-number">0x00000002</span>@ <span class="hljs-built_in">set</span> bit <span class="hljs-number">1</span> (--A-) Align<br>  orrr0, r0, #<span class="hljs-number">0x00000800</span>@ <span class="hljs-built_in">set</span> bit <span class="hljs-number">11</span> (Z---) BTB<br><span class="hljs-meta">#<span class="hljs-keyword">if</span> CONFIG_IS_ENABLED(SYS_ICACHE_OFF)</span><br>  bicr0, r0, #<span class="hljs-number">0x00001000</span>@ clear bit <span class="hljs-number">12</span> (I) I-cache<br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>  orrr0, r0, #<span class="hljs-number">0x00001000</span>@ <span class="hljs-built_in">set</span> bit <span class="hljs-number">12</span> (I) I-cache<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>  mcrp15, <span class="hljs-number">0</span>, r0, c1, c0, <span class="hljs-number">0</span><br><br>  movr5, lr@ Store my Caller<br>  mrcp15, <span class="hljs-number">0</span>, r1, c0, c0, <span class="hljs-number">0</span>@ r1 has Read Main ID Register (MIDR)<br>  movr3, r1, lsr #<span class="hljs-number">20</span>@ get variant field<br>  andr3, r3, #<span class="hljs-number">0xf</span>@ r3 has CPU variant<br>  andr4, r1, #<span class="hljs-number">0xf</span>@ r4 has CPU revision<br>  movr2, r3, lsl #<span class="hljs-number">4</span>@ shift variant field <span class="hljs-keyword">for</span> combined value<br>  orrr2, r4, r2@ r2 has combined CPU variant + revision<br><br>  movpc, r5@ back to my caller<br>ENDPROC(cpu_init_cp15)<br></code></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://blog.csdn.net/ooonebook/article/details/53070065">https://blog.csdn.net/ooonebook/article/details/53070065</a></li><li><a href="https://blog.csdn.net/ooonebook/article/details/52779230">https://blog.csdn.net/ooonebook/article/details/52779230</a></li><li><a href="https://blog.csdn.net/liangzc1124/article/details/112413742?spm=1001.2101.3001.6661.1&utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~default-1.pc_relevant_paycolumn_v2&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~default-1.pc_relevant_paycolumn_v2&utm_relevant_index=1">mcr指令参考</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>u-boot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux输入输出重定向</title>
    <link href="/2021/12/31/2021-12-31-linux%E9%87%8D%E5%AE%9A%E5%90%91/"/>
    <url>/2021/12/31/2021-12-31-linux%E9%87%8D%E5%AE%9A%E5%90%91/</url>
    
    <content type="html"><![CDATA[<p>&amp;&gt;file  意思是把标准输出 和 标准错误输出 都重定向到文件file中</p><p>&#x2F;dev&#x2F;null是一个文件，这个文件比较特殊，所有传给它的东西它都丢弃掉</p><ul><li>command &gt; filename 把标准输出重定向到一个新文件中</li><li>command &gt;&gt; filename 把标准输出重定向到一个文件中(追加)</li><li>command 1 &gt; fielname 把标准输出重定向到一个文件中(和 &gt; 一样的)</li><li>command &gt; filename 2&gt;&amp;1 把标准输出和标准错误一起重定向到一个文件中</li><li>command 2 &gt; filename 把标准错误重定向到一个文件中</li><li>command 2 &gt;&gt; filename 把标准输出重定向到一个文件中(追加)</li><li>command &gt;&gt; filename 2&gt;&amp;1 把标准输出和标准错误一起重定向到一个文件中(追加)</li><li>command &lt; filename &gt;filename2 把command命令以filename文件作为标准输入，以filename2文件作为标准输出</li><li>command &lt; filename 把command命令以filename文件作为标准输入</li><li>command &lt;&lt; delimiter 把从标准输入中读入，直至遇到delimiter分界符</li><li>command &lt;&amp;m 把文件描述符m作为标准输入</li><li>command &gt;&amp;m 把标准输出重定向到文件描述符m中</li><li>command &lt;&amp;- 把关闭标准输入</li></ul><p><a href="https://blog.csdn.net/alex_xhl/article/details/5719381">原文链接</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Buildroot学习记录</title>
    <link href="/2021/12/29/2021-12-29-Buildroot/"/>
    <url>/2021/12/29/2021-12-29-Buildroot/</url>
    
    <content type="html"><![CDATA[<blockquote><p>Buildroot是一个高度可定制的嵌入式Linux镜像构建工具。</p></blockquote><h2 id="Buildroot-目录结构"><a href="#Buildroot-目录结构" class="headerlink" title="Buildroot 目录结构"></a>Buildroot 目录结构</h2><ul><li>arch: CPU架构相关的配置脚本</li><li>board: 在构建系统时，board默认的boot和Linux kernel配置文件，以及一些板级相关脚本</li><li>boot: uboot配置脚本目录</li><li>configs: 板级配置文件，该目录下的配置文件记录着该机器平台或者方案使用的工具链，boot， kernel，各种应用软件包的配置</li><li>dl: download的简写，下载一些开源包。第一次下载后，下次就不会再去从官网下载了，而是从dl&#x2F;目录下拿开源包，以节约时间</li><li>docs:</li><li>fs: 各种文件系统的自动构建脚本</li><li>linux: 存放Linux kernel的自动构建脚本</li><li>package: 第三方开源包的自动编译构建脚本，用来配置编译dl目录下载的开源包</li><li>support:</li><li>system: 存放文件系统目录的和设备节点的模板，这些模板会被拷贝到output&#x2F;目录下，用于制作根文件系统rootfs</li><li>toolchain&#x2F; 目录中存放着各种制作工具链的脚本</li></ul><h2 id="编译出的output输出目录"><a href="#编译出的output输出目录" class="headerlink" title="编译出的output输出目录"></a>编译出的output输出目录</h2><ul><li>images: 存储所有映像（内核映像，引导加载程序和根文件系统映像）的位置。这些是您需要放在目标系统上的文件。</li><li>build&#x2F;: 构建所有组件的位置（包括主机上Buildroot所需的工具和针对目标编译的软件包）。该目录为每个组件包含一个子目录。</li><li>host&#x2F;: 包含为主机构建的工具和目标工具链。</li><li>staging&#x2F;: 是到内部目标工具链host&#x2F;的符号链接</li><li>target&#x2F;: 它几乎包含了目标的完整根文件系统。除了设备文件&#x2F;dev&#x2F;（Buildroot无法创建它们，因为Buildroot不能以root身份运行并且不想以root身份运行）之外，所需的一切都存在。</li></ul><h2 id="Buildroot-常用make命令"><a href="#Buildroot-常用make命令" class="headerlink" title="Buildroot 常用make命令"></a>Buildroot 常用make命令</h2><ul><li>make help</li><li>make menuconfig: 图形化配置</li><li>make uboot-menuconfig</li><li>make linux-menuconfig</li><li>make savedefconfig: 保存配置到xxx_defconfig中<br/><br/></li><li>make clean: 删除编译文件</li><li>make distclean: 等于make clean + 删除配置, 可以针对某一软件包make &lt;pkg&gt; disclean(这里要用disclean)</li><li>make show-targets: 显示本次配置编译的目标</li><li>make &lt;pkg&gt;-target: 单独编译某个pkg</li><li>make &lt;pkg&gt;-rebuild: 重新编译pkg</li><li>make &lt;pkg&gt;-extract: 只下载解压pkg,不编译，pkg解压后放在output&#x2F;build&#x2F;对应的pkg目录下</li><li>make &lt;pkg&gt;-source: 只下载某pkg，然后不做任何事情</li></ul><h2 id="添加自己的软件包"><a href="#添加自己的软件包" class="headerlink" title="添加自己的软件包"></a>添加自己的软件包</h2><h3 id="添加package-x2F-Config-in入口"><a href="#添加package-x2F-Config-in入口" class="headerlink" title="添加package&#x2F;Config.in入口"></a>添加package&#x2F;Config.in入口</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs kufds">config BR2_PACKAGE_HELLOWORLD<br>bool &quot;helloworld&quot;<br>help<br>  This is a demo to add myown(fuzidage) package.<br></code></pre></td></tr></table></figure><h3 id="配置APP对应的Config-in和mk文件"><a href="#配置APP对应的Config-in和mk文件" class="headerlink" title="配置APP对应的Config.in和mk文件"></a>配置APP对应的Config.in和mk文件</h3><p>在package中新增目录helloworld，并在里面添加Config.in和helloworld.mk<br><strong>Config.in</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs fdsf">config BR2_PACKAGE_HELLOWORLD<br>bool &quot;helloworld&quot;<br>help<br>  This is a demo to add myown(fuzidage) package.<br></code></pre></td></tr></table></figure><p><strong>helloworld.mk</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dfsdf">HELLOWORLD_VERSION:= 1.0.0<br>HELLOWORLD_SITE:= $(BR2_EXTERNAL)/source/ipcam/helloworld<br>HELLOWORLD_SITE_METHOD:=local<br>HELLOWORLD_INSTALL_TARGET:=YES<br><br>$(eval $(cmake-package))<br><br></code></pre></td></tr></table></figure><h3 id="编写APP源码和Makefile"><a href="#编写APP源码和Makefile" class="headerlink" title="编写APP源码和Makefile"></a>编写APP源码和Makefile</h3><h3 id="通过make-menuconfig选中APP"><a href="#通过make-menuconfig选中APP" class="headerlink" title="通过make menuconfig选中APP"></a>通过make menuconfig选中APP</h3><h3 id="编译使用APP"><a href="#编译使用APP" class="headerlink" title="编译使用APP"></a>编译使用APP</h3><p>可以和整个平台一起编译，或者<code>make helloworld</code>单独编译。</p><p>这两个文件在选中此APP之后，都会被拷贝到<code>output/build/helloworld-1.0.0</code>文件夹中。</p><p>生成的bin文件被拷贝到<code>output/target/bin/helloworld</code></p><h2 id="如何重新编译软件包"><a href="#如何重新编译软件包" class="headerlink" title="如何重新编译软件包"></a>如何重新编译软件包</h2><p>经过第一次完整编译后，如果我们需要对源码包重新配置，我们不能直接在buildroot上的根目录下直接make，buildroot是不知道你已经对源码进行重新配置，它只会将第一次编译出来的文件，再次打包成根文件系统镜像文件。</p><p>那么可以通过以下2种方式重新编译：</p><p><strong>1. 直接删除源码包,然后make all</strong></p><p>例如我们要重新编译helloworld，那么可以直接删除output&#x2F;build&#x2F;helloworld目录，那么当你make的时候，就会自动从dl文件夹下，解压缩源码包，并重新安装。这种效率偏低</p><p><strong>2. 进行xxx-rebuild,然后make all</strong></p><p>也是以helloworld为例子，我们直接输入make helloworld-rebuild，即可对build&#x2F;helloworld&#x2F;目录进行重新编译，然后还要进行make all(或者make helloworld)</p><h2 id="Config-in-语法"><a href="#Config-in-语法" class="headerlink" title="Config.in 语法"></a>Config.in 语法</h2><p>用Kconfig语言编写，用来配置packages</p><p>必须以<code>BR2_PACKAGE_&lt;PACKAGE&gt;</code>开头</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gxwbwcmsauj30i303zt8t.jpg"></p><p>Config.in 是层级结构<code>package/&lt;pkg&gt;/Config.in</code>都被包含在<code>package/Config.in</code></p><h3 id="menu-x2F-endmenu"><a href="#menu-x2F-endmenu" class="headerlink" title="menu&#x2F;endmenu"></a>menu&#x2F;endmenu</h3><p>menuconfig中层级目录由<code>menu</code>来嵌套定义</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs kbuild">menu &quot;Base System&quot;<br>source &quot;$BR2_EXTERNAL_platform_PATH/package/example/Config.in&quot;<br>source &quot;$BR2_EXTERNAL_platform_PATH/package/fstools/Config.in&quot;<br>endmenu<br><br>menu &quot;Test Package&quot;<br>source &quot;$BR2_EXTERNAL_platform_PATH/package/foobar/Config.in&quot;<br>endmenu<br><br>// Test Package在Base System下一级目录<br>menu &quot;Base System&quot;<br>menu &quot;Test Package&quot;<br>endmenu<br>endmenu<br></code></pre></td></tr></table></figure><h3 id="if-x2F-endif"><a href="#if-x2F-endif" class="headerlink" title="if&#x2F;endif"></a>if&#x2F;endif</h3><h3 id="choice-x2F-endchoice"><a href="#choice-x2F-endchoice" class="headerlink" title="choice&#x2F;endchoice"></a>choice&#x2F;endchoice</h3><h3 id="select、depends-on"><a href="#select、depends-on" class="headerlink" title="select、depends on"></a>select、depends on</h3><p>select是一种自动依赖，如果A select B，只要A被enable，B就会被enable，而且不可unselected</p><p>depends on是一种用户定义的依赖，如果A depends on B, A只有在B被enable后才可见</p><ul><li><code>make \&lt;pkg\&gt;-show-depend</code>: 查看pkg依赖的包</li><li><code>make \&lt;pkg\&gt;-show-rdepend</code>: 查看依赖pkg的包</li></ul><h2 id="mk文件"><a href="#mk文件" class="headerlink" title=".mk文件"></a>.mk文件</h2><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">xxx_SITE_METHOD</span> = local<br><span class="hljs-attr">xxx_SITE</span> = 本地源码库地址<br><br><span class="hljs-attr">xxx_SITE_METHOD</span> = remote<br><span class="hljs-attr">xxx_SITE</span> = 远程URL<br></code></pre></td></tr></table></figure><p>Packages可以被安装到不同目录：</p><ul><li>target目录：<code>$(TARGET_DIR)</code></li><li>staging目录：<code>$(STAGING_DIR)</code></li><li>images目录：<code>$(BINARIES_DIR)</code></li></ul><p>分别由三个变量决定：</p><ul><li><p><code>&lt;pkg&gt;_INSTALL_TARGET</code> , defaults to <code>YES</code>. If <code>YES</code>, then <code>&lt;pkg&gt;_INSTALL_TARGET_CMDS</code> will be called </p></li><li><p><code>&lt;pkg&gt;_INSTALL_STAGING</code> , defaults to <code>NO</code>. If <code>YES</code>, then <code>&lt;pkg&gt;_INSTALL_STAGING_CMDS</code> will be called </p></li><li><p><code>&lt;pkg&gt;_INSTALL_IMAGES</code> , defaults to <code>NO</code>. If <code>YES</code>, then <code>&lt;pkg&gt;_INSTALL_IMAGES_CMDS</code> will be called <br/><br/></p></li><li><p>Application Package一般只要安装到target</p></li><li><p>Shared library动态库必须安装到target与staging</p></li><li><p>header-based library和static-only library静态库只安装到staging</p></li><li><p>bootloader和linux要安装到images</p></li></ul><p>Config.in文件不规定编译顺序，.mk文件中的&lt;pkg&gt;_DEPENDENCIES可以规定编译顺序，&lt;pkg&gt;_DEPENDENCIES后面的软件包先编译。</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gxwbwv9a45j30gq03ydg1.jpg"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.cnblogs.com/fuzidage/p/12049442.html">https://www.cnblogs.com/fuzidage/p/12049442.html</a><br><a href="1.png" download>图片1</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Buildroot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git clone慢解决方法</title>
    <link href="/2021/12/25/2021-12-25-gitclone/"/>
    <url>/2021/12/25/2021-12-25-gitclone/</url>
    
    <content type="html"><![CDATA[<p>使用GitHub镜像地址,在github.com后面添加cnpmjs.org:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git <span class="hljs-built_in">clone</span> https://github.com.cnpmjs.org+你的GitHub名字+项目名称+git</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">例如</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git <span class="hljs-built_in">clone</span> https://github.com.cnpmjs.org/YC-Xiang/YC-Xiang.github.io.git</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>杂项</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mac Homebrew和gem下载源修改</title>
    <link href="/2021/12/24/2021-12-24-Homebrew-gem/"/>
    <url>/2021/12/24/2021-12-24-Homebrew-gem/</url>
    
    <content type="html"><![CDATA[<p>mac环境</p><h1 id="Homebrew下载源修改"><a href="#Homebrew下载源修改" class="headerlink" title="Homebrew下载源修改:"></a>Homebrew下载源修改:</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">替换brew.git:</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cd</span> <span class="hljs-string">&quot;<span class="hljs-subst">$(brew --repo)</span>&quot;</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">中国科大:</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git remote set-url origin https://mirrors.ustc.edu.cn/brew.git</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">替换homebrew-core.git:</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cd</span> <span class="hljs-string">&quot;<span class="hljs-subst">$(brew --repo)</span>/Library/Taps/homebrew/homebrew-core&quot;</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">中国科大:</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git remote set-url origin https://mirrors.ustc.edu.cn/homebrew-core.git</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">替换homebrew-bottles:</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">中国科大:</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles&#x27;</span> &gt;&gt; ~/.zshrc</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">source</span> ~/.zshrc</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">应用生效:</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">brew update</span><br></code></pre></td></tr></table></figure><h1 id="Gem下载源修改："><a href="#Gem下载源修改：" class="headerlink" title="Gem下载源修改："></a>Gem下载源修改：</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">移除gem默认源，改成ruby-china源</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">gem sources -r https://rubygems.org/ -a https://gems.ruby-china.com/</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">使用Gemfile和Bundle的项目，可以做下面修改，就不用修改Gemfile的<span class="hljs-built_in">source</span></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">bundle config mirror.https://rubygems.org https://gems.ruby-china.com</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">删除Bundle的一个镜像源</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">bundle config --delete <span class="hljs-string">&#x27;mirror.https://rubygems.org&#x27;</span></span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>杂项</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
