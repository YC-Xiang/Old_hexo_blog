<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Markdown and theme Fluid syntax</title>
    <link href="/2023/01/05/Markdown%E8%AF%AD%E6%B3%95/"/>
    <url>/2023/01/05/Markdown%E8%AF%AD%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="Tags"><a href="#Tags" class="headerlink" title="Tags"></a>Tags</h2><p>Method 1:</p><div class="note note-success">            <p>Markdown</p>          </div><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs md">&#123;% note success %&#125;<br>success<br>&#123;% endnote %&#125;<br></code></pre></td></tr></table></figure><p>Method 2:</p><p class="note note-info">html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;note note-info&quot;</span>&gt;</span>info<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><p>Support various colors:</p><p class="note note-primary">primary</p><p class="note note-secondary">secondary</p><p class="note note-success">success</p><p class="note note-danger">danger</p><p class="note note-warning">warning</p><p class="note note-info">info</p><p class="note note-light">light</p><p><strong>inline tags</strong>:</p><span class="label label-danger">text</span> <span class="label label-warning">text</span><span class="label label-info">text</span> <span class="label label-success">text</span><h2 id="Blockquotes"><a href="#Blockquotes" class="headerlink" title="Blockquotes"></a>Blockquotes</h2><blockquote><p>This is a blockquote with two paragraphs. This is first paragraph.</p><p> This is second pragraph.Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.</p></blockquote><h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><ul><li>red</li><li>green</li><li>blue</li></ul><h2 id="Task-list"><a href="#Task-list" class="headerlink" title="Task list"></a>Task list</h2><p>Method 1：</p><ul><li><input disabled="" type="checkbox"> a task list item</li><li><input checked="" disabled="" type="checkbox"> completed</li></ul><p>Method 2：</p><div>            <input type="checkbox" disabled >a task list item          </div><div>            <input type="checkbox" disabled checked="checked">a task list item          </div>            <input type="checkbox" disabled >a task list item          <p><a href="https://hexo.fluid-dev.com/docs/guide/#tag-%E6%8F%92%E4%BB%B6">勾选框</a></p><h2 id="Code-block"><a href="#Code-block" class="headerlink" title="Code block"></a>Code block</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-keyword">require</span> <span class="hljs-string">&#x27;redcarpet&#x27;</span><br>markdown = <span class="hljs-title class_">Redcarpet</span>.new(<span class="hljs-string">&quot;Hello World!&quot;</span>)<br>puts markdown.to_html<br></code></pre></td></tr></table></figure><p>inline code:<br><code>int a = 123</code></p><h2 id="Math-block"><a href="#Math-block" class="headerlink" title="Math block"></a>Math block</h2><p class="note note-warning">需要在front-matter中指定math：true</p><p>$$<br>\mathbf{V}_1 \times \mathbf{V}_2 &#x3D;<br>\begin{bmatrix}<br>\mathbf{i} &amp; \mathbf{j} &amp; \mathbf{k} \<br>\frac{\partial X}{\partial u} &amp;  \frac{\partial Y}{\partial u} &amp; 0 \<br>\frac{\partial X}{\partial v} &amp;  \frac{\partial Y}{\partial v} &amp; 0 \<br>\end{bmatrix}<br>$$</p><p class="note note-danger">矩阵没法换行，有bug，以后换个LaTeX引擎</p><p>Inline math:<br>$\lim_{x \to \infty} \exp(-x) &#x3D; 0$</p><h2 id="Table"><a href="#Table" class="headerlink" title="Table"></a>Table</h2><table><thead><tr><th>First Header</th><th>Second Header</th></tr></thead><tbody><tr><td>Content Cell</td><td>Content Cell</td></tr><tr><td>Content Cell</td><td>Content Cell</td></tr></tbody></table><table><thead><tr><th align="left">Left-Aligned</th><th align="center">Center Aligned</th><th align="right">Right Aligned</th></tr></thead><tbody><tr><td align="left">col 3 is</td><td align="center">some wordy text</td><td align="right">$1600</td></tr><tr><td align="left">col 2 is</td><td align="center">centered</td><td align="right">$12</td></tr><tr><td align="left">zebra stripes</td><td align="center">are neat</td><td align="right">$1</td></tr></tbody></table><h2 id="Footnotes"><a href="#Footnotes" class="headerlink" title="Footnotes"></a>Footnotes</h2><p>这是一句话<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="这是对应的脚注">[1]</span></a></sup></p><h2 id="Horizontal-Rules"><a href="#Horizontal-Rules" class="headerlink" title="Horizontal Rules"></a>Horizontal Rules</h2><hr><h2 id="Mermaid"><a href="#Mermaid" class="headerlink" title="Mermaid"></a>Mermaid</h2><p class="note note-warning">需要在front-matter中指定mermaid：true</p><pre><code class=" mermaid">classDiagramClass01 &lt;|-- AveryLongClass : CoolClass03 *-- Class04Class05 o-- Class06Class07 .. Class08Class09 --&gt; C2 : Where am i?Class09 --* C3Class09 --|&gt; Class07Class07 : equals()Class07 : Object[] elementDataClass01 : size()Class01 : int chimpClass01 : int gorillaClass08 &lt;--&gt; C2: Cool label</code></pre><h2 id="Links"><a href="#Links" class="headerlink" title="Links"></a>Links</h2><p>This is <a href="http://www.baidu.com/" title="Baidu">Baidu</a> inline link.</p><h3 id="Internal-Links"><a href="#Internal-Links" class="headerlink" title="Internal Links"></a>Internal Links</h3><p><a href="#Tags">Internal link</a></p><h3 id="Reference-Links"><a href="#Reference-Links" class="headerlink" title="Reference Links"></a>Reference Links</h3><p>看起来和Links的区别就是可以在文章其他地方定义链接</p><p>This is <a href="http://www.baidu.com/" title="Optional Title Here">Baidu</a> reference-style link.</p><h2 id="URLs"><a href="#URLs" class="headerlink" title="URLs"></a>URLs</h2><p>直接放网址的方式：</p><p><a href="https://yc-xiang.github.io/">https://yc-xiang.github.io/</a></p><h2 id="Images"><a href="#Images" class="headerlink" title="Images"></a>Images</h2><div align="center"><img src="https://xyc-1316422823.cos.ap-shanghai.myqcloud.com/git1.png" width="50%"></div><p><strong>Method 1</strong>: html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://xyc-1316422823.cos.ap-shanghai.myqcloud.com/git1.png&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;50%&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>Method 2</strong>: Markdown</p><p>不能改格式大小<br><img src="/img/default.png" alt="图片标题"></p><p><strong>Method 3</strong>: Tags 插件</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="/img/default.png" alt="图片标题"></div><div class="group-image-wrap"><img src="/img/default.png" alt="图片标题"></div><div class="group-image-wrap"><img src="/img/default.png" alt="图片标题"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="/img/default.png" alt="图片标题"></div><div class="group-image-wrap"><img src="/img/default.png" alt="图片标题"></div></div></div><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><p><del>Mistaken text</del> <u>underline</u><br><strong>Bold</strong> <em>italic</em></p><!-- This is some comments --><h2 id="Emoji"><a href="#Emoji" class="headerlink" title="Emoji"></a>Emoji</h2><p><span class="github-emoji" alias="smile" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8">&amp;#x1f604;</span><br><span class="github-emoji" alias="dog" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f436.png?v8">&amp;#x1f436;</span></p><h2 id="html"><a href="#html" class="headerlink" title="html"></a>html</h2><!-- This is some comments --><p>注释：<code>&lt;!-- This is some comments --&gt;</code></p><p>空行：<code>&lt;br /&gt;</code></p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://hexo.fluid-dev.com/docs/guide/">Hexo Fluid 用户手册</a></p><br /><br /><br /><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>这是对应的脚注<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    
    <tags>
      
      <tag>Markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>test</title>
    <link href="/2023/01/05/test/"/>
    <url>/2023/01/05/test/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git 常用指令</title>
    <link href="/2023/01/04/2023-1-4-git/"/>
    <url>/2023/01/04/2023-1-4-git/</url>
    
    <content type="html"><![CDATA[<h1 id="GIT"><a href="#GIT" class="headerlink" title="GIT"></a>GIT</h1><h2 id="Git-push"><a href="#Git-push" class="headerlink" title="Git push"></a>Git push</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># git push [远程主机名][本地分支名]:[远程分支名]</span><br>$ git push origin HEAD:master<br><span class="hljs-comment"># HEAD是当前指向的分支,可以用git show HEAD 查看</span><br>$ git show HEAD<br>$ git branch -a<br><span class="hljs-comment"># 需要code view 时要加/refs/for</span><br>$ git push origin HEAD:refs/for/master<br><br><span class="hljs-comment"># 不加远程分支名</span><br>$ git push origin dev<br><span class="hljs-comment"># 相当于,如果远程分支不存在则会自动创建, 并创建联系</span><br>$ git push origin dev:dev<br>$ git branch --set-upstream-to=origin/dev<br><span class="hljs-comment"># 删除远程分支，直接推送空分支到远程分支</span><br>$ git push origin :dev<br></code></pre></td></tr></table></figure><h2 id="git-diff"><a href="#git-diff" class="headerlink" title="git diff"></a>git diff</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 显示出branch1和branch2中差异的部分</span><br>$ git diff branch1 branch2 --<span class="hljs-built_in">stat</span><br><span class="hljs-comment"># 显示指定文件的详细差异</span><br>$ git diff branch1 branch2 具体文件路径<br><span class="hljs-comment"># 显示出所有有差异的文件的详细差异</span><br>$ git diff branch1 branch2<br><span class="hljs-comment"># 显示本地master分支与远程master分支的区别</span><br>$ git diff master origin/master<br><br><span class="hljs-comment"># 比较两个commit</span><br>git diff commit id1 commit id2<br></code></pre></td></tr></table></figure><hr><p>撤回当前commit，并且保留修改的代码：</p><p>git reset –soft HEAD^ &#x2F; commit ID</p><p>不保留修改的代码：</p><p>git reset –hard HEAD^ &#x2F; commit ID</p><h2 id="git-rebase-git-merge"><a href="#git-rebase-git-merge" class="headerlink" title="git rebase, git merge"></a>git rebase, git merge</h2><p>git merge：在dev分支git merge main，&#x2F;&#x2F; 将main最新的commit拉到dev，有合并记录</p><p>git rebase：在dev分支git rebase main &#x2F;&#x2F;修改dev分支，将main最新的commit拉到dev，将dev最新的commit 接到main后面</p><p>e.g 在本地一个分支上有了C5，C6两个自己的commit，但此时远程master分支上别人又合并了两个C3,C4分支。如果用git pull（git fetch + git merge）会有一个新的merge commit。此时需要git rebase 将c5,c6接到最新的master代码(c4)上。</p><p><img src="https://xyc-1316422823.cos.ap-shanghai.myqcloud.com/git1.png"></p><p><img src="https://xyc-1316422823.cos.ap-shanghai.myqcloud.com/git2.png"></p><h2 id="git-revert"><a href="#git-revert" class="headerlink" title="git revert"></a>git revert</h2><p>git branch -f dev HEAD^  &#x2F;&#x2F;让dev分支指向HEAD^</p><p>本地撤销当前提交：git reset HEAD^</p><p>远程撤销当前提交：git revert HEAD</p><p>git remote show origin：查看远程信息</p><p>git branch –set-upstream-to&#x3D;origin&#x2F;develop（远程分支） develop：关联远程分支</p><p>那么如何查看已经配置分支关联信息呢，通过下述三条命令均可：</p><ol><li>git branch -vv</li><li>git remote show origin</li><li>cat .git&#x2F;config</li></ol><p>在一个分支上修改，突然要切到另一个分支：</p><ol><li>把现在的修改 git commit</li><li>git stash 暂存起来，注意这个stash 也会带到另一个分支。注意git stash pop和apply的区别，apply不会将栈弹出</li></ol><h2 id="git-stash"><a href="#git-stash" class="headerlink" title="git stash"></a>git stash</h2><p>git stash save “add style to our site” 添加stash信息</p><p>git stash clear :注意这是清空你所有的内容</p><p>git stash drop stash@{0} 这是删除第一个队列</p><p>git stash apply 不会删除内容</p><p>git stash pop 删除内容</p><p>git stash 不能stash untracked的文件，需要先git add，或者git stash -u</p><p>查看某个stash的具体内容：git stash show -p stash@{1}</p><h2 id="git-放弃修改-放弃增加文件操作"><a href="#git-放弃修改-放弃增加文件操作" class="headerlink" title="git 放弃修改, 放弃增加文件操作"></a>git 放弃修改, 放弃增加文件操作</h2><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gxwbxstsu3j30lu0agaah.jpg"></p><p>1.本地修改了一些文件 (并没有使用 git add 到暂存区)，想放弃修改:</p><ul><li>单个文件: <code>git checkout -- filename</code></li><li>所有文件&#x2F;文件夹: <code>git checkout .</code></li></ul><p>2.本地新增了一些文件 (并没有 git add 到暂存区)，想放弃修改:</p><ul><li>单个文件&#x2F;文件夹: <code>rm  -rf filename</code></li><li>所有文件: <code>git clean -nxfd</code></li></ul><blockquote><p>-f 删除untracked files <br/><br>-d 连untracked 的目录一起删掉 <br/><br>-x 连 gitignore 的untrack 文件&#x2F;目录也一起删掉（慎用,一般这个是用来删掉编译出来的.o之类的文件用的）<br/><br>-n 先看看会删掉哪些文件，防止重要文件被误删</p></blockquote><p>3.本地修改&#x2F;新增了一些文件，已经 git add 到暂存区，想放弃修改:</p><ul><li>单个文件&#x2F;文件夹: <code>git reset HEAD filename</code></li><li>所有文件&#x2F;文件夹: <code>git reset HEAD .</code></li></ul><p>4.本地通过 git add 和 git commit 后，想要撤销此次 commit：</p><ul><li><p>撤销 commit, 同时保留该 commit 修改：<code>git reset commit_id</code> (撤销之后，你所做的已经 commit 的修改还在工作区)</p></li><li><p>撤销 commit, 同时本地删除该 commit 修改：<code>git reset --hard commit_id</code> (撤销之后，你所做的已经 commit 的修改将会清除，仍在工作区&#x2F;暂存区的代码也将会清除)</p></li></ul><blockquote><p>这里的commit id可以通过git log查看选取前6位，commit_id是想要回到的节点</p></blockquote><h2 id="git-rebase"><a href="#git-rebase" class="headerlink" title="git rebase"></a>git rebase</h2><blockquote><p>不要通过rebase对任何已经提交到公共仓库中的commit进行修改（你自己一个人玩的分支除外）</p></blockquote><h3 id="合并多个commit为一个完整commit"><a href="#合并多个commit为一个完整commit" class="headerlink" title="合并多个commit为一个完整commit"></a>合并多个commit为一个完整commit</h3><p><a href="https://www.jianshu.com/p/4a8f4af4e803">https://www.jianshu.com/p/4a8f4af4e803</a></p><p><code>git rebase -i HEAD~3</code> 修改HEAD往后三个分支（包括HEAD)</p><p>或者<code>git rebase -i 某个commit</code> 修改某个commit前的所有提交</p><h3 id="将某一段commit粘贴到另一个分支上"><a href="#将某一段commit粘贴到另一个分支上" class="headerlink" title="将某一段commit粘贴到另一个分支上"></a>将某一段commit粘贴到另一个分支上</h3><h2 id="生成-x2F-打patch"><a href="#生成-x2F-打patch" class="headerlink" title="生成&#x2F;打patch"></a>生成&#x2F;打patch</h2><p>生成patch：git diff &gt; patch.diff</p><p>检查patch：git apply –stat patch.diff</p><p>查看能否打入：git apply –check patch.diff</p><p><a href="https://adtxl.com/index.php/archives/471.html">https://adtxl.com/index.php/archives/471.html</a></p><p><a href="https://blog.csdn.net/u013318019/article/details/114860407">https://blog.csdn.net/u013318019/article/details/114860407</a></p><h2 id="git-tag"><a href="#git-tag" class="headerlink" title="git tag"></a>git tag</h2><p><a href="https://www.runoob.com/git/git-tag.html">https://www.runoob.com/git/git-tag.html</a></p><p>git tag 查看所有标签</p><p>创建：git tag -a v1.0</p><p>删除：git tag -d v1.0</p><p>查看：git show v1.0</p><p>创建分支并与远程某分支关联：</p><p><a href="https://www.atlassian.com/git/tutorials">https://www.atlassian.com/git/tutorials</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>程序员的自我修养学习笔记</title>
    <link href="/2022/01/27/2022-1-27-%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/"/>
    <url>/2022/01/27/2022-1-27-%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/</url>
    
    <content type="html"><![CDATA[<h2 id="第三章-目标文件里有什么"><a href="#第三章-目标文件里有什么" class="headerlink" title="第三章 目标文件里有什么"></a>第三章 目标文件里有什么</h2><h3 id="3-1-目标文件的格式"><a href="#3-1-目标文件的格式" class="headerlink" title="3.1 目标文件的格式"></a>3.1 目标文件的格式</h3><ul><li>可重定位文件 .o, .a</li><li>可执行文件</li><li>共享目标文件 .so</li><li>核心转储文件</li></ul><p><code>file</code> 命令可以查看文件格式</p><h3 id="3-3-挖掘SimpleSection-o"><a href="#3-3-挖掘SimpleSection-o" class="headerlink" title="3.3 挖掘SimpleSection.o"></a>3.3 挖掘SimpleSection.o</h3><p><code>gcc -c SimpleSection.c</code> -c 表示只编译不链接</p><p><code>objdump -h SimpleSection.o</code> 可以查看目标文件的结构 -h:打印段基本信息 -s:把所有段内容以16进制打印出来 -d:将所有包含指令的段反汇编 -x:详细信息</p><p><code>size SimpleSection.o</code> 可以查看ELF文件段的长度</p>]]></content>
    
    
    
    <tags>
      
      <tag>程序员的自我修养</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSAPP-第七章 链接</title>
    <link href="/2022/01/20/2022-1-20-csapp-ch7/"/>
    <url>/2022/01/20/2022-1-20-csapp-ch7/</url>
    
    <content type="html"><![CDATA[<h2 id="7-2-静态链接"><a href="#7-2-静态链接" class="headerlink" title="7.2 静态链接"></a>7.2 静态链接</h2><ul><li>符号解析</li><li>重定位</li></ul><h2 id="7-3-目标文件"><a href="#7-3-目标文件" class="headerlink" title="7.3 目标文件"></a>7.3 目标文件</h2><ul><li>可重定位目标文件</li><li>可执行目标文件</li><li>共享目标文件</li></ul><h2 id="7-4-可重定位目标文件"><a href="#7-4-可重定位目标文件" class="headerlink" title="7.4 可重定位目标文件"></a>7.4 可重定位目标文件</h2><ul><li><code>.test</code></li><li><code>.rodata</code></li><li><code>.data</code> 已初始化的全局和静态变量 </li><li><code>.bss</code>  未初始化和初始化为0的全局和静态变量</li><li><code>symtab</code> 符号表</li><li><code>rel.text</code></li><li><code>rel.data</code></li><li><code>debug</code></li><li><code>line</code></li><li><code>strlab</code></li></ul><h2 id="7-5-符号和符号表"><a href="#7-5-符号和符号表" class="headerlink" title="7.5 符号和符号表"></a>7.5 符号和符号表</h2><ul><li>全局符号 非静态C函数、全局变量</li><li>外部符号 由其他模块定义，并被本模块引用的<strong>全局符号</strong></li><li>局部符号 static函数、static变量</li></ul><p>可重定位目标文件中才有的伪节：</p><ul><li><code>ABS</code>: 不该被重定位的符号</li><li><code>UNDEF</code>: 未定义的符号，即在本目标模块引用，却在其他地方定义的符号。</li><li><code>COMMON</code>: 还未被分配位置的未初始化数据</li></ul><p>COMMONN和.bss区别：</p><ul><li><code>COMMON</code>: 未初始化的全局变量</li><li><code>.bss</code>: 未初始化的静态变量，以及初始化未0的全局或静态变量</li></ul><h2 id="7-6-符号解析"><a href="#7-6-符号解析" class="headerlink" title="7.6 符号解析"></a>7.6 符号解析</h2><h3 id="7-6-1-linker如何解析多重定义的全局符号"><a href="#7-6-1-linker如何解析多重定义的全局符号" class="headerlink" title="7.6.1 linker如何解析多重定义的全局符号"></a>7.6.1 linker如何解析多重定义的全局符号</h3><ul><li>规则1：不允许多个同名的强符号</li><li>规则2：如果有一个强符号和多个弱符号同名，选择强符号</li><li>规则3：如果有多个同名的弱符号，随机选一个</li></ul><p>在p2()中对x写，<strong>可能</strong>会overwrite y，因为两个弱符号随机选一个，如果选择的是p2中的x则没事，如果选择的是p1的x，情况同下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// p1.c</span><br><span class="hljs-type">int</span> x;<br><span class="hljs-type">int</span> y;<br>p1()&#123;&#125;;<br><br><span class="hljs-comment">// p2.c</span><br><span class="hljs-type">double</span> x;<br>p2()&#123;&#125;;<br></code></pre></td></tr></table></figure><p>在p2()中对x写，<strong>一定</strong>会overwrite y，因为p1中x是强符号，但在p2中写x，x的数据类型仍然是double</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// p1.c</span><br><span class="hljs-type">int</span> x=<span class="hljs-number">7</span>;<br><span class="hljs-type">int</span> y=<span class="hljs-number">5</span>;<br>p1()&#123;&#125;;<br><br><span class="hljs-comment">// p2.c</span><br><span class="hljs-type">double</span> x;<br>p2()&#123;&#125;;<br></code></pre></td></tr></table></figure><p>通过 GCC <code>-fno-common</code> 多重定义的全局符号触发错误，<code>-Werror</code>把警告都变成错误来预防。    </p><h3 id="7-6-3-使用静态库解析引用"><a href="#7-6-3-使用静态库解析引用" class="headerlink" title="7.6.3 使用静态库解析引用"></a>7.6.3 使用静态库解析引用</h3><p>最基础实现的库要放在最后</p><p>foo.c 调用libx.a和libz.a 而这两个库又调用liby.a: <code>gcc foo.c libx.a libz.a liby.a</code> </p><p>foo.c调用libx.a libx.a调用liby.a liby.a也调用libx.a: <code>gcc foo.c libx.a liby.a libx.a</code></p><h2 id="7-7-重定位"><a href="#7-7-重定位" class="headerlink" title="7.7 重定位"></a>7.7 重定位</h2><ul><li>重定位节和符号定义</li><li>重定位节中的符号引用</li></ul><h3 id="7-7-1-重定位条目"><a href="#7-7-1-重定位条目" class="headerlink" title="7.7.1 重定位条目"></a>7.7.1 重定位条目</h3><p><code>R_X86_64_PC32</code>：32位PC相对地址的引用</p><p><code>R_X86_64_32</code>：32位绝对地址的引用</p>]]></content>
    
    
    
    <tags>
      
      <tag>CSAPP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSAPP-第三章 程序的机器级表示</title>
    <link href="/2022/01/10/2022-1-10-csapp-ch3/"/>
    <url>/2022/01/10/2022-1-10-csapp-ch3/</url>
    
    <content type="html"><![CDATA[<h2 id="第三章-程序的机器级表示"><a href="#第三章-程序的机器级表示" class="headerlink" title="第三章 程序的机器级表示"></a>第三章 程序的机器级表示</h2><h2 id="3-2-程序编码"><a href="#3-2-程序编码" class="headerlink" title="3.2 程序编码"></a>3.2 程序编码</h2><p><code>linux&gt; gcc -Og -o p p1.c p2.c</code> 编译选项-Og告诉编译器使用会生成符合原始C代码整体结构的机器代码的优化等级。</p><p>实际中，从得到的程序的性能考虑，较高级别的优化（例如，以选项-O1或-O2指定）被认为是较好的选择。</p><h3 id="3-2-1-机器级代码"><a href="#3-2-1-机器级代码" class="headerlink" title="3.2.1 机器级代码"></a>3.2.1 机器级代码</h3><p><code>gcc -S mstore.c</code> 编译生成汇编代码<code>mstore.s</code></p><p><code>gcc -c mstore.c</code> 编译并汇编生成机器指令<code>mstore.o</code></p><p><strong>展示程序的字节表示</strong></p><p><code>(gdb) x/14xb multstore</code> gdb(x)显示从函数multstore地址开始的14个十六进制(x)的字节(b)</p><p><strong>反汇编器</strong></p><p><code>objdump -d mstore.o</code></p><h2 id="3-3-3-4-数据格式-x2F-访问信息"><a href="#3-3-3-4-数据格式-x2F-访问信息" class="headerlink" title="3.3-3.4 数据格式&#x2F;访问信息"></a>3.3-3.4 数据格式&#x2F;访问信息</h2><p>书上图3-1 C语言数据类型在x86-64中的大小</p><p>图3-2 整数寄存器</p><blockquote><p>生成1字节和2字节数字的指令会保持剩下的字节不变；</p><p>生成4字节数字的指令会把高位4字节置为0（<code>movl $-1,%eax</code>）。P124有例子</p><p>即movl指令以寄存器作为目的时，会把该寄存器的高位4字节设置为0</p></blockquote><h3 id="3-4-1-操作数指示符"><a href="#3-4-1-操作数指示符" class="headerlink" title="3.4.1 操作数指示符"></a>3.4.1 操作数指示符</h3><ul><li>立即数 <code>$-577</code> <code>$0x1F</code></li><li>寄存器 <code>%rax</code></li><li>内存引用 <code>(%rax)</code></li></ul><h3 id="3-4-2-数据传送指令"><a href="#3-4-2-数据传送指令" class="headerlink" title="3.4.2 数据传送指令"></a>3.4.2 数据传送指令</h3><p><strong>mov</strong></p><ul><li><code>movb</code> 传送字节</li><li><code>movw</code> 传送字</li><li><code>movl</code> 传送双字</li><li><code>movq</code> 传送四字</li><li><code>movabsq</code> 传送绝对的四字</li></ul><blockquote><p>常规的<code>movq</code>只能以32位补码数字的立即数作为源操作数，然后把这个值符号扩展得到64位的值</p><p><code>movabsq</code>可以以任意64位立即数作为源操作数，并且只能以寄存器作为目的</p></blockquote><p><strong>movz</strong></p><p><code>movzbw/movzbl/movzwl/movzbq/movzwq</code></p><p>零扩展</p><p><strong>movs</strong></p><p><code>movsbw/movsbl/movswl/movsbq/movswq/movslq</code></p><p><code>cltq</code>: 把<code>%eax</code>符号扩展到<code>%rax</code></p><p>符号扩展</p><h3 id="3-4-4-压入和弹出栈数据"><a href="#3-4-4-压入和弹出栈数据" class="headerlink" title="3.4.4 压入和弹出栈数据"></a>3.4.4 压入和弹出栈数据</h3><p><code>pushq</code> 和 <code>popq</code></p><p><code>pushq %rbp</code>等价于</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs fff">subq $8, %rsp 栈指针减8<br>movq %rbp, (%rsp) 将值写到新的栈顶地址<br></code></pre></td></tr></table></figure><p><code>popq %rax</code> 等价于</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs fff">movq (%rsp), %rax 从栈顶读出数据<br>addq $8, %rsp 栈指针加8<br></code></pre></td></tr></table></figure><h2 id="3-5-算数和逻辑操作"><a href="#3-5-算数和逻辑操作" class="headerlink" title="3.5 算数和逻辑操作"></a>3.5 算数和逻辑操作</h2><p>加载有效地址</p><ul><li><code>leaq</code></li></ul><p>一元操作</p><ul><li><code>inc</code> +1</li><li><code>dec</code> -1</li><li><code>neg</code> 取负-</li><li><code>not</code> 取补~</li></ul><p>二元操作</p><ul><li><code>add</code> +</li><li><code>sub</code> -</li><li><code>imul</code> *</li><li><code>xor</code> 异或</li><li><code>or</code> 或</li><li><code>and</code> 与</li></ul><p>移位</p><ul><li><code>sal</code> 左移</li><li><code>shl</code> 左移同sal</li><li><code>sar</code> 算术右移</li><li><code>shr</code> 逻辑右移</li></ul><h3 id="3-5-1-加载有效地址"><a href="#3-5-1-加载有效地址" class="headerlink" title="3.5.1 加载有效地址"></a>3.5.1 加载有效地址</h3><p><code>leaq</code> </p><p>两种作用：</p><ol><li>从内存读数据到寄存器 <code>leaq S, D</code> means <code>D &lt;- &amp;S</code></li><li>描述普通的算术操作（常用）<code>leaq 7(%rdx, %rdx, 4), %rax</code> means <code>%rax=5x+7</code> x是rdx的值</li></ol><h3 id="3-5-2-一元和二元操作"><a href="#3-5-2-一元和二元操作" class="headerlink" title="3.5.2 一元和二元操作"></a>3.5.2 一元和二元操作</h3><h3 id="3-5-3-移位操作"><a href="#3-5-3-移位操作" class="headerlink" title="3.5.3 移位操作"></a>3.5.3 移位操作</h3><h3 id="3-5-4-讨论"><a href="#3-5-4-讨论" class="headerlink" title="3.5.4 讨论"></a>3.5.4 讨论</h3><p><code>xorq %rdx, %rdx</code> 对rdx清零操作，相当于<code>x = x ^ x</code>，比<code>movl $0, %rdx</code>指令更节省字节。</p><h3 id="3-5-5-特殊的算术操作"><a href="#3-5-5-特殊的算术操作" class="headerlink" title="3.5.5 特殊的算术操作"></a>3.5.5 特殊的算术操作</h3><h2 id="3-6-控制"><a href="#3-6-控制" class="headerlink" title="3.6 控制"></a>3.6 控制</h2><h3 id="3-6-1-条件码"><a href="#3-6-1-条件码" class="headerlink" title="3.6.1 条件码"></a>3.6.1 条件码</h3><ul><li><code>CF</code> 进位标志</li><li><code>ZF</code> 零标志</li><li><code>SF</code> 符号标志</li><li><code>OF</code> 溢出标志</li></ul><p><code>leaq</code>不改变任何条件码</p><p><code>cmp</code>和<code>test</code>指令</p><h3 id="3-6-2-访问条件码"><a href="#3-6-2-访问条件码" class="headerlink" title="3.6.2 访问条件码"></a>3.6.2 访问条件码</h3><p>条件码通常不会直接读取，常用的方法有三种：</p><ol><li>根据条件码的组合，将一个字节设置为0或1，<code>sete/setne/sets/setns/setg/setl/seta/setb...</code></li><li>条件跳转到程序某个其他部分 <code>je/js/jg/jl/ja/jb...</code></li><li>可以有条件地传送数据 <code>cmove/cmovs/cmovg/cmovl/cmova/cmovb</code></li></ol><h3 id="3-6-3-跳转指令"><a href="#3-6-3-跳转指令" class="headerlink" title="3.6.3 跳转指令"></a>3.6.3 跳转指令</h3><ul><li>无条件跳转：<code>jmp</code> 直接跳转 <code>jmp + LABEL</code> 间接跳转 <code>jmp + *Operand</code></li><li>有条件跳转：<code>je/js/jg/jl/ja/jb...</code></li></ul><h3 id="3-6-4-跳转指令的编码"><a href="#3-6-4-跳转指令的编码" class="headerlink" title="3.6.4 跳转指令的编码"></a>3.6.4 跳转指令的编码</h3><p>将目标指令的地址与紧跟在跳转指令后面的那条指令的地址之间的差作为编码</p><h3 id="3-6-5-条件控制实现条件分支"><a href="#3-6-5-条件控制实现条件分支" class="headerlink" title="3.6.5 条件控制实现条件分支"></a>3.6.5 条件控制实现条件分支</h3><h3 id="3-6-6-条件传送实现条件分支"><a href="#3-6-6-条件传送实现条件分支" class="headerlink" title="3.6.6 条件传送实现条件分支"></a>3.6.6 条件传送实现条件分支</h3><h3 id="3-6-7-循环"><a href="#3-6-7-循环" class="headerlink" title="3.6.7 循环"></a>3.6.7 循环</h3><ul><li>do while</li><li>while<ul><li>jump to middle</li><li>guarded-do (-O1策略)</li></ul></li><li>for</li></ul><h3 id="3-6-8-switch语句"><a href="#3-6-8-switch语句" class="headerlink" title="3.6.8 switch语句"></a>3.6.8 switch语句</h3><p>跳转表</p><h2 id="3-7-过程"><a href="#3-7-过程" class="headerlink" title="3.7 过程"></a>3.7 过程</h2>]]></content>
    
    
    
    <tags>
      
      <tag>CSAPP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>U-boot启动流程分析</title>
    <link href="/2022/01/06/2022-1-6-U-boot%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/"/>
    <url>/2022/01/06/2022-1-6-U-boot%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h2 id="uboot三段式启动流程"><a href="#uboot三段式启动流程" class="headerlink" title="uboot三段式启动流程"></a>uboot三段式启动流程</h2><h3 id="Stage-1-Flash"><a href="#Stage-1-Flash" class="headerlink" title="Stage 1(Flash)"></a>Stage 1(Flash)</h3><h3 id="Stage-2-SRAM"><a href="#Stage-2-SRAM" class="headerlink" title="Stage 2(SRAM)"></a>Stage 2(SRAM)</h3><h3 id="Stage-3-SDRAM"><a href="#Stage-3-SDRAM" class="headerlink" title="Stage 3(SDRAM)"></a>Stage 3(SDRAM)</h3><h2 id="armv7架构uboot"><a href="#armv7架构uboot" class="headerlink" title="armv7架构uboot"></a>armv7架构uboot</h2><ul><li><p>arch级的初始化</p><ul><li>关闭中断，设置svc模式</li><li>禁用MMU、TLB</li><li>关键寄存器的设置，包括时钟、看门狗的寄存器</li></ul></li><li><p>板级的初始化</p><ul><li>堆栈环境的设置</li><li>代码重定向之前的板级初始化，包括串口、定时器、环境变量、I2C\SPI等等的初始化</li><li>进行代码重定向</li><li>代码重定向之后的板级初始化，包括板级代码中定义的初始化操作、emmc、nand flash、网络、中断等等的初始化</li><li>进入命令行状态，等待终端输入命令以及对命令进行处理</li></ul></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c">  .globl_start<br>  .globlsave_boot_params_ret<br>  .type   save_boot_params_ret,%function<br><br>_start:<br>  <span class="hljs-comment">/* Allow the board to save important registers */</span><br>  bsave_boot_params<br>save_boot_params_ret:<br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">   * disable interrupts (FIQ and IRQ), also set the cpu to SVC32 mode,</span><br><span class="hljs-comment">   * except if in HYP mode already</span><br><span class="hljs-comment">   */</span><br>  mrsr0, cpsr            <span class="hljs-comment">// 将程序状态寄存器cpsr的内容传送到r0中</span><br>  andr1, r0, #<span class="hljs-number">0x1f</span>       <span class="hljs-comment">// 读出r0寄存器[0:4]位的值保存到r1寄存器</span><br>  teqr1, #<span class="hljs-number">0x1a</span>           <span class="hljs-comment">// 判断r1寄存器与0x1a是否相等，是否处于HYP模式</span><br>  bicne r0, r0, #<span class="hljs-number">0x1f</span>     <span class="hljs-comment">// 不等则清除r0[0:4]位</span><br>  orrne r0, r0, #<span class="hljs-number">0x13</span>     <span class="hljs-comment">// 设置成SVC模式</span><br>  orrr0, r0, #<span class="hljs-number">0xc0</span>       <span class="hljs-comment">// 禁止快中断和外部中断</span><br>  msrcpsr,r0             <span class="hljs-comment">// 将r0传入cpsr</span><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Setup vector:</span><br><span class="hljs-comment"> * (OMAP4 spl TEXT_BASE is not 32 byte aligned.</span><br><span class="hljs-comment"> * Continue to use ROM code vector only in OMAP4 spl)</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">/* the mask ROM code should have PLL and others stable */</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> CONFIG_SKIP_LOWLEVEL_INIT</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> CONFIG_CPU_V7A</span><br>  blcpu_init_cp15  <span class="hljs-comment">// 调用cpu_init_cp15，初始化协处理器CP15,从而禁用MMU和TLB。</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>  ldrr0, =(CONFIG_SYS_FLASH_BASE + CONFIG_RAMINIT_OFFSET)<br>  ldrr1, =(CONFIG_LOAD_BASE)<br>  ldrr2, =(CONFIG_SYS_FLASH_BASE + CONFIG_RAMINIT_OFFSET \<br>      + CONFIG_RAMINIT_SIZE)<br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">   * r0 = source address</span><br><span class="hljs-comment">   * r1 = target address</span><br><span class="hljs-comment">   * r2 = source end address</span><br><span class="hljs-comment">   */</span><br><span class="hljs-number">1</span>:<br>  ldrr3, [r0], #<span class="hljs-number">4</span>  <span class="hljs-comment">// 将r0地址的数据写入r3, 并将新地址r0+4写入r0</span><br>  strr3, [r1], #<span class="hljs-number">4</span>  <span class="hljs-comment">// 将r3的数据写入以r1为地址的存储器，并将新地址r1+4写入r1</span><br>  cmpr0, r2        <span class="hljs-comment">// 比较r0，r2的值，判断source addr == source end addr</span><br>  bne<span class="hljs-number">1b</span>   <span class="hljs-comment">// 不等则跳回1</span><br><br>  ldr pc,=(CONFIG_LOAD_BASE) <span class="hljs-comment">// 跳转到CONFIG_LOAD_BASE地址执行指令</span><br><br>ENTRY(save_boot_params) <span class="hljs-comment">// ENTRY()实际上是一个global symbol的宏</span><br>  bsave_boot_params_ret@ back to my caller<br>ENDPROC(save_boot_params)<br>  .weaksave_boot_params<br><br>ENTRY(cpu_init_cp15)<br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">   * Invalidate L1 I/D</span><br><span class="hljs-comment">     * 这里只需要知道是对CP15处理器的部分寄存器清零即可。</span><br><span class="hljs-comment">     * 将协处理器的c7\c8清零等等，各个寄存器的含义请参考《ARM的CP15协处理器的寄存器》</span><br><span class="hljs-comment">   */</span><br>  movr0, #<span class="hljs-number">0</span><span class="hljs-comment">// set up for MCR</span><br>  mcrp15, <span class="hljs-number">0</span>, r0, c8, c7, <span class="hljs-number">0</span><span class="hljs-comment">// invalidate TLBs</span><br>  mcrp15, <span class="hljs-number">0</span>, r0, c7, c5, <span class="hljs-number">0</span><span class="hljs-comment">// invalidate icache</span><br>  mcrp15, <span class="hljs-number">0</span>, r0, c7, c5, <span class="hljs-number">6</span><span class="hljs-comment">// invalidate BP array</span><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> __LINUX_ARM_ARCH__ &gt;= 7</span><br>  dsb sy<br>  isb sy<br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>  mcr     p15, <span class="hljs-number">0</span>, r0, c7, c10, <span class="hljs-number">4</span>@ DSB<br>  mcr     p15, <span class="hljs-number">0</span>, r0, c7, c5, <span class="hljs-number">4</span>@ ISB<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">   * disable MMU stuff and caches</span><br><span class="hljs-comment">   */</span><br>  mrcp15, <span class="hljs-number">0</span>, r0, c1, c0, <span class="hljs-number">0</span><br>  bicr0, r0, #<span class="hljs-number">0x00002000</span>@ clear bits <span class="hljs-number">13</span> (--V-)<br>  bicr0, r0, #<span class="hljs-number">0x00000007</span>@ clear bits <span class="hljs-number">2</span>:<span class="hljs-number">0</span> (-CAM)<br>  orrr0, r0, #<span class="hljs-number">0x00000002</span>@ <span class="hljs-built_in">set</span> bit <span class="hljs-number">1</span> (--A-) Align<br>  orrr0, r0, #<span class="hljs-number">0x00000800</span>@ <span class="hljs-built_in">set</span> bit <span class="hljs-number">11</span> (Z---) BTB<br><span class="hljs-meta">#<span class="hljs-keyword">if</span> CONFIG_IS_ENABLED(SYS_ICACHE_OFF)</span><br>  bicr0, r0, #<span class="hljs-number">0x00001000</span>@ clear bit <span class="hljs-number">12</span> (I) I-cache<br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>  orrr0, r0, #<span class="hljs-number">0x00001000</span>@ <span class="hljs-built_in">set</span> bit <span class="hljs-number">12</span> (I) I-cache<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>  mcrp15, <span class="hljs-number">0</span>, r0, c1, c0, <span class="hljs-number">0</span><br><br>  movr5, lr@ Store my Caller<br>  mrcp15, <span class="hljs-number">0</span>, r1, c0, c0, <span class="hljs-number">0</span>@ r1 has Read Main ID Register (MIDR)<br>  movr3, r1, lsr #<span class="hljs-number">20</span>@ get variant field<br>  andr3, r3, #<span class="hljs-number">0xf</span>@ r3 has CPU variant<br>  andr4, r1, #<span class="hljs-number">0xf</span>@ r4 has CPU revision<br>  movr2, r3, lsl #<span class="hljs-number">4</span>@ shift variant field <span class="hljs-keyword">for</span> combined value<br>  orrr2, r4, r2@ r2 has combined CPU variant + revision<br><br>  movpc, r5@ back to my caller<br>ENDPROC(cpu_init_cp15)<br></code></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://blog.csdn.net/ooonebook/article/details/53070065">https://blog.csdn.net/ooonebook/article/details/53070065</a></li><li><a href="https://blog.csdn.net/ooonebook/article/details/52779230">https://blog.csdn.net/ooonebook/article/details/52779230</a></li><li><a href="https://blog.csdn.net/liangzc1124/article/details/112413742?spm=1001.2101.3001.6661.1&utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~default-1.pc_relevant_paycolumn_v2&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~default-1.pc_relevant_paycolumn_v2&utm_relevant_index=1">mcr指令参考</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>u-boot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux输入输出重定向</title>
    <link href="/2021/12/31/2021-12-31-linux%E9%87%8D%E5%AE%9A%E5%90%91/"/>
    <url>/2021/12/31/2021-12-31-linux%E9%87%8D%E5%AE%9A%E5%90%91/</url>
    
    <content type="html"><![CDATA[<p>&amp;&gt;file  意思是把标准输出 和 标准错误输出 都重定向到文件file中</p><p>&#x2F;dev&#x2F;null是一个文件，这个文件比较特殊，所有传给它的东西它都丢弃掉</p><ul><li>command &gt; filename 把标准输出重定向到一个新文件中</li><li>command &gt;&gt; filename 把标准输出重定向到一个文件中(追加)</li><li>command 1 &gt; fielname 把标准输出重定向到一个文件中(和 &gt; 一样的)</li><li>command &gt; filename 2&gt;&amp;1 把标准输出和标准错误一起重定向到一个文件中</li><li>command 2 &gt; filename 把标准错误重定向到一个文件中</li><li>command 2 &gt;&gt; filename 把标准输出重定向到一个文件中(追加)</li><li>command &gt;&gt; filename 2&gt;&amp;1 把标准输出和标准错误一起重定向到一个文件中(追加)</li><li>command &lt; filename &gt;filename2 把command命令以filename文件作为标准输入，以filename2文件作为标准输出</li><li>command &lt; filename 把command命令以filename文件作为标准输入</li><li>command &lt;&lt; delimiter 把从标准输入中读入，直至遇到delimiter分界符</li><li>command &lt;&amp;m 把文件描述符m作为标准输入</li><li>command &gt;&amp;m 把标准输出重定向到文件描述符m中</li><li>command &lt;&amp;- 把关闭标准输入</li></ul><p><a href="https://blog.csdn.net/alex_xhl/article/details/5719381">原文链接</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Buildroot学习记录</title>
    <link href="/2021/12/29/2021-12-29-Buildroot/"/>
    <url>/2021/12/29/2021-12-29-Buildroot/</url>
    
    <content type="html"><![CDATA[<blockquote><p>Buildroot是一个高度可定制的嵌入式Linux镜像构建工具。</p></blockquote><h2 id="Buildroot-目录结构"><a href="#Buildroot-目录结构" class="headerlink" title="Buildroot 目录结构"></a>Buildroot 目录结构</h2><ul><li>arch: CPU架构相关的配置脚本</li><li>board: 在构建系统时，board默认的boot和Linux kernel配置文件，以及一些板级相关脚本</li><li>boot: uboot配置脚本目录</li><li>configs: 板级配置文件，该目录下的配置文件记录着该机器平台或者方案使用的工具链，boot， kernel，各种应用软件包的配置</li><li>dl: download的简写，下载一些开源包。第一次下载后，下次就不会再去从官网下载了，而是从dl&#x2F;目录下拿开源包，以节约时间</li><li>docs:</li><li>fs: 各种文件系统的自动构建脚本</li><li>linux: 存放Linux kernel的自动构建脚本</li><li>package: 第三方开源包的自动编译构建脚本，用来配置编译dl目录下载的开源包</li><li>support:</li><li>system: 存放文件系统目录的和设备节点的模板，这些模板会被拷贝到output&#x2F;目录下，用于制作根文件系统rootfs</li><li>toolchain&#x2F; 目录中存放着各种制作工具链的脚本</li></ul><h2 id="编译出的output输出目录"><a href="#编译出的output输出目录" class="headerlink" title="编译出的output输出目录"></a>编译出的output输出目录</h2><ul><li>images: 存储所有映像（内核映像，引导加载程序和根文件系统映像）的位置。这些是您需要放在目标系统上的文件。</li><li>build&#x2F;: 构建所有组件的位置（包括主机上Buildroot所需的工具和针对目标编译的软件包）。该目录为每个组件包含一个子目录。</li><li>host&#x2F;: 包含为主机构建的工具和目标工具链。</li><li>staging&#x2F;: 是到内部目标工具链host&#x2F;的符号链接</li><li>target&#x2F;: 它几乎包含了目标的完整根文件系统。除了设备文件&#x2F;dev&#x2F;（Buildroot无法创建它们，因为Buildroot不能以root身份运行并且不想以root身份运行）之外，所需的一切都存在。</li></ul><h2 id="Buildroot-常用make命令"><a href="#Buildroot-常用make命令" class="headerlink" title="Buildroot 常用make命令"></a>Buildroot 常用make命令</h2><ul><li>make help</li><li>make menuconfig: 图形化配置</li><li>make uboot-menuconfig</li><li>make linux-menuconfig</li><li>make savedefconfig: 保存配置到xxx_defconfig中<br/><br/></li><li>make clean: 删除编译文件</li><li>make distclean: 等于make clean + 删除配置, 可以针对某一软件包make &lt;pkg&gt; disclean(这里要用disclean)</li><li>make show-targets: 显示本次配置编译的目标</li><li>make &lt;pkg&gt;-target: 单独编译某个pkg</li><li>make &lt;pkg&gt;-rebuild: 重新编译pkg</li><li>make &lt;pkg&gt;-extract: 只下载解压pkg,不编译，pkg解压后放在output&#x2F;build&#x2F;对应的pkg目录下</li><li>make &lt;pkg&gt;-source: 只下载某pkg，然后不做任何事情</li></ul><h2 id="添加自己的软件包"><a href="#添加自己的软件包" class="headerlink" title="添加自己的软件包"></a>添加自己的软件包</h2><h3 id="添加package-x2F-Config-in入口"><a href="#添加package-x2F-Config-in入口" class="headerlink" title="添加package&#x2F;Config.in入口"></a>添加package&#x2F;Config.in入口</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs kufds">config BR2_PACKAGE_HELLOWORLD<br>bool &quot;helloworld&quot;<br>help<br>  This is a demo to add myown(fuzidage) package.<br></code></pre></td></tr></table></figure><h3 id="配置APP对应的Config-in和mk文件"><a href="#配置APP对应的Config-in和mk文件" class="headerlink" title="配置APP对应的Config.in和mk文件"></a>配置APP对应的Config.in和mk文件</h3><p>在package中新增目录helloworld，并在里面添加Config.in和helloworld.mk<br><strong>Config.in</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs fdsf">config BR2_PACKAGE_HELLOWORLD<br>bool &quot;helloworld&quot;<br>help<br>  This is a demo to add myown(fuzidage) package.<br></code></pre></td></tr></table></figure><p><strong>helloworld.mk</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dfsdf">HELLOWORLD_VERSION:= 1.0.0<br>HELLOWORLD_SITE:= $(BR2_EXTERNAL)/source/ipcam/helloworld<br>HELLOWORLD_SITE_METHOD:=local<br>HELLOWORLD_INSTALL_TARGET:=YES<br><br>$(eval $(cmake-package))<br><br></code></pre></td></tr></table></figure><h3 id="编写APP源码和Makefile"><a href="#编写APP源码和Makefile" class="headerlink" title="编写APP源码和Makefile"></a>编写APP源码和Makefile</h3><h3 id="通过make-menuconfig选中APP"><a href="#通过make-menuconfig选中APP" class="headerlink" title="通过make menuconfig选中APP"></a>通过make menuconfig选中APP</h3><h3 id="编译使用APP"><a href="#编译使用APP" class="headerlink" title="编译使用APP"></a>编译使用APP</h3><p>可以和整个平台一起编译，或者<code>make helloworld</code>单独编译。</p><p>这两个文件在选中此APP之后，都会被拷贝到<code>output/build/helloworld-1.0.0</code>文件夹中。</p><p>生成的bin文件被拷贝到<code>output/target/bin/helloworld</code></p><h2 id="如何重新编译软件包"><a href="#如何重新编译软件包" class="headerlink" title="如何重新编译软件包"></a>如何重新编译软件包</h2><p>经过第一次完整编译后，如果我们需要对源码包重新配置，我们不能直接在buildroot上的根目录下直接make，buildroot是不知道你已经对源码进行重新配置，它只会将第一次编译出来的文件，再次打包成根文件系统镜像文件。</p><p>那么可以通过以下2种方式重新编译：</p><p><strong>1. 直接删除源码包,然后make all</strong></p><p>例如我们要重新编译helloworld，那么可以直接删除output&#x2F;build&#x2F;helloworld目录，那么当你make的时候，就会自动从dl文件夹下，解压缩源码包，并重新安装。这种效率偏低</p><p><strong>2. 进行xxx-rebuild,然后make all</strong></p><p>也是以helloworld为例子，我们直接输入make helloworld-rebuild，即可对build&#x2F;helloworld&#x2F;目录进行重新编译，然后还要进行make all(或者make helloworld)</p><h2 id="Config-in-语法"><a href="#Config-in-语法" class="headerlink" title="Config.in 语法"></a>Config.in 语法</h2><p>用Kconfig语言编写，用来配置packages</p><p>必须以<code>BR2_PACKAGE_&lt;PACKAGE&gt;</code>开头</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gxwbwcmsauj30i303zt8t.jpg"></p><p>Config.in 是层级结构<code>package/&lt;pkg&gt;/Config.in</code>都被包含在<code>package/Config.in</code></p><h3 id="menu-x2F-endmenu"><a href="#menu-x2F-endmenu" class="headerlink" title="menu&#x2F;endmenu"></a>menu&#x2F;endmenu</h3><p>menuconfig中层级目录由<code>menu</code>来嵌套定义</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs kbuild">menu &quot;Base System&quot;<br>source &quot;$BR2_EXTERNAL_platform_PATH/package/example/Config.in&quot;<br>source &quot;$BR2_EXTERNAL_platform_PATH/package/fstools/Config.in&quot;<br>endmenu<br><br>menu &quot;Test Package&quot;<br>source &quot;$BR2_EXTERNAL_platform_PATH/package/foobar/Config.in&quot;<br>endmenu<br><br>// Test Package在Base System下一级目录<br>menu &quot;Base System&quot;<br>menu &quot;Test Package&quot;<br>endmenu<br>endmenu<br></code></pre></td></tr></table></figure><h3 id="if-x2F-endif"><a href="#if-x2F-endif" class="headerlink" title="if&#x2F;endif"></a>if&#x2F;endif</h3><h3 id="choice-x2F-endchoice"><a href="#choice-x2F-endchoice" class="headerlink" title="choice&#x2F;endchoice"></a>choice&#x2F;endchoice</h3><h3 id="select、depends-on"><a href="#select、depends-on" class="headerlink" title="select、depends on"></a>select、depends on</h3><p>select是一种自动依赖，如果A select B，只要A被enable，B就会被enable，而且不可unselected</p><p>depends on是一种用户定义的依赖，如果A depends on B, A只有在B被enable后才可见</p><ul><li><code>make \&lt;pkg\&gt;-show-depend</code>: 查看pkg依赖的包</li><li><code>make \&lt;pkg\&gt;-show-rdepend</code>: 查看依赖pkg的包</li></ul><h2 id="mk文件"><a href="#mk文件" class="headerlink" title=".mk文件"></a>.mk文件</h2><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">xxx_SITE_METHOD</span> = local<br><span class="hljs-attr">xxx_SITE</span> = 本地源码库地址<br><br><span class="hljs-attr">xxx_SITE_METHOD</span> = remote<br><span class="hljs-attr">xxx_SITE</span> = 远程URL<br></code></pre></td></tr></table></figure><p>Packages可以被安装到不同目录：</p><ul><li>target目录：<code>$(TARGET_DIR)</code></li><li>staging目录：<code>$(STAGING_DIR)</code></li><li>images目录：<code>$(BINARIES_DIR)</code></li></ul><p>分别由三个变量决定：</p><ul><li><p><code>&lt;pkg&gt;_INSTALL_TARGET</code> , defaults to <code>YES</code>. If <code>YES</code>, then <code>&lt;pkg&gt;_INSTALL_TARGET_CMDS</code> will be called </p></li><li><p><code>&lt;pkg&gt;_INSTALL_STAGING</code> , defaults to <code>NO</code>. If <code>YES</code>, then <code>&lt;pkg&gt;_INSTALL_STAGING_CMDS</code> will be called </p></li><li><p><code>&lt;pkg&gt;_INSTALL_IMAGES</code> , defaults to <code>NO</code>. If <code>YES</code>, then <code>&lt;pkg&gt;_INSTALL_IMAGES_CMDS</code> will be called <br/><br/></p></li><li><p>Application Package一般只要安装到target</p></li><li><p>Shared library动态库必须安装到target与staging</p></li><li><p>header-based library和static-only library静态库只安装到staging</p></li><li><p>bootloader和linux要安装到images</p></li></ul><p>Config.in文件不规定编译顺序，.mk文件中的&lt;pkg&gt;_DEPENDENCIES可以规定编译顺序，&lt;pkg&gt;_DEPENDENCIES后面的软件包先编译。</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gxwbwv9a45j30gq03ydg1.jpg"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.cnblogs.com/fuzidage/p/12049442.html">https://www.cnblogs.com/fuzidage/p/12049442.html</a><br><a href="1.png" download>图片1</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Buildroot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git clone慢解决方法</title>
    <link href="/2021/12/25/2021-12-25-gitclone/"/>
    <url>/2021/12/25/2021-12-25-gitclone/</url>
    
    <content type="html"><![CDATA[<p>使用GitHub镜像地址,在github.com后面添加cnpmjs.org:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git <span class="hljs-built_in">clone</span> https://github.com.cnpmjs.org+你的GitHub名字+项目名称+git</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">例如</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git <span class="hljs-built_in">clone</span> https://github.com.cnpmjs.org/YC-Xiang/YC-Xiang.github.io.git</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>杂项</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mac Homebrew和gem下载源修改</title>
    <link href="/2021/12/24/2021-12-24-Homebrew-gem/"/>
    <url>/2021/12/24/2021-12-24-Homebrew-gem/</url>
    
    <content type="html"><![CDATA[<p>mac环境</p><h1 id="Homebrew下载源修改"><a href="#Homebrew下载源修改" class="headerlink" title="Homebrew下载源修改:"></a>Homebrew下载源修改:</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">替换brew.git:</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cd</span> <span class="hljs-string">&quot;<span class="hljs-subst">$(brew --repo)</span>&quot;</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">中国科大:</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git remote set-url origin https://mirrors.ustc.edu.cn/brew.git</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">替换homebrew-core.git:</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cd</span> <span class="hljs-string">&quot;<span class="hljs-subst">$(brew --repo)</span>/Library/Taps/homebrew/homebrew-core&quot;</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">中国科大:</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git remote set-url origin https://mirrors.ustc.edu.cn/homebrew-core.git</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">替换homebrew-bottles:</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">中国科大:</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles&#x27;</span> &gt;&gt; ~/.zshrc</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">source</span> ~/.zshrc</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">应用生效:</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">brew update</span><br></code></pre></td></tr></table></figure><h1 id="Gem下载源修改："><a href="#Gem下载源修改：" class="headerlink" title="Gem下载源修改："></a>Gem下载源修改：</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">移除gem默认源，改成ruby-china源</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">gem sources -r https://rubygems.org/ -a https://gems.ruby-china.com/</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">使用Gemfile和Bundle的项目，可以做下面修改，就不用修改Gemfile的<span class="hljs-built_in">source</span></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">bundle config mirror.https://rubygems.org https://gems.ruby-china.com</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">删除Bundle的一个镜像源</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">bundle config --delete <span class="hljs-string">&#x27;mirror.https://rubygems.org&#x27;</span></span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>杂项</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/1997/12/07/hello-world/"/>
    <url>/1997/12/07/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>杂项</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
